from db1 import *
from faker import Faker
import random
from datetime import datetime as dt
import time
import os
#************** II.Inserting initial state data in database tables to test real world situations *************#
#----------------------------------------------II-1-Inserting roles----------------------------------------#
# insert_role("Administrator")
# insert_role("Question_Creator")
# insert_role("Exam_Supervisor")
# insert_role("Exam_Handler")
# insert_role("Exam_Creator")
# insert_role("Exam_Analyst")
# insert_role("Student")
#----------------------------------------------II-2-Inserting users----------------------------------------#
#Initialize Faker to generate fake data
# fake = Faker()
# Note: fake data generated by Faker are valid names, usernames, passwords and emails, so no need to worry about violating constraints.

# Generate and insert data for 300 students
# for i in range(300):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Student")
# print("Students data insertion completed successfully.")

# Generate and insert data for 30 employees
# for i in range(10):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Question_Creator")

# for i in range(6):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Exam_Creator")

# for i in range(5):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Exam_Supervisor")

# for i in range(5):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Exam_Handler")

# for i in range(4):
#     user_name = fake.user_name()
#     password = fake.password()
#     first_name = fake.first_name()
#     last_name = fake.last_name()
#     email = fake.email()
#     insert_user(user_name, password, first_name, last_name, email)
#     insert_user_role(user_name,"Exam_Analyst")
# print("Employees data insertion completed successfully.")
#----------------------------------------II-3-Inserting permissions---------------------------------------#
# insert_permission("Create_Exam")         # Permission to create an exam
# insert_permission("Create_Question")     # Permission to create a question
# insert_permission("Modify_Exam")         # Permission to modify an exam
# insert_permission("Modify_Question")     # Permission to modify a question
# insert_permission("Analyze_Exam")        # Permission to analyze an exam
# insert_permission("Handle_Exam")         # Permission to handle an exam
# insert_permission("Supervise_Exam")      # Permission to supervise an exam
# insert_permission("Review_Feedbacks")    # Permission to review feedbacks
# insert_permission("Take_Exam")           # Permission to take an exam
# insert_permission("Submit_Feedback")     # Permission to submit feedbacks about exam
# insert_permission("Review_Exam_Results") # Permission to review the exam results
# insert_permission("Administrate")        # Permission to do anything

# Inserting Admin user and his role
# insert_user("Amir1374", "021#Gang*GTA$", "Amir Hossein", "Ganji", "efefg911@gmail.com")
# insert_user_role("Amir1374","Administrator")
# user_logout("Amir1374")

# Insert a question creator user
# insert_user("Alij1995", "Tir@#1456spX", "Ali", "Jamali", "alig32@gmail.com")
# insert_user_role("Alij1995","Question_Creator")
#------------------------------------II-4-Inserting role permissions-------------------------------------#
# insert_role_permission("Administrator","Administrate")
# insert_role_permission("Question_Creator","Create_Question")
# insert_role_permission("Question_Creator","Modify_Question")
# insert_role_permission("Exam_Creator","Create_Exam")
# insert_role_permission("Exam_Creator","Modify_Exam")
# insert_role_permission("Exam_Supervisor","Supervise_Exam")
# insert_role_permission("Exam_Supervisor","Review_Exam_Results")
# insert_role_permission("Exam_Supervisor","Review_Feedbacks")
# insert_role_permission("Exam_Handler","Handle_Exam")
# insert_role_permission("Exam_Analyst","Analyze_Exam")
# insert_role_permission("Exam_Analyst","Review_Feedbacks")
# insert_role_permission("Student","Take_Exam")
# insert_role_permission("Student","Submit_Feedback")
# insert_role_permission("Student","Review_Exam_Results")
#------------------------------------II-5-Inserting questions & options-----------------------------------#
#------------------------part1: Python programming - multiple choice questions
# insert_question("Q1","Information technology (IT)","Python programming", "What is an abstract class?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q1O1","Q1","An abstract class is the name for any class from which you can instantiate an object.", None, 0)
# insert_question_option("Q1O2","Q1","Abstract classes must be redefined any time an object is instantiated from them.", None, 0)
# insert_question_option("Q1O3","Q1","Abstract classes must inherit from concrete classes.", None, 0)
# insert_question_option("Q1O4","Q1",'An abstract class exists only so that other "concrete" classes can inherit from the abstract class.', None, 1)

# insert_question("Q2","Information technology (IT)","Python programming", "What happens when you use the built-in function any() on a list?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q2O1","Q2","The any() function will randomly return any item from the list.", None, 0)
# insert_question_option("Q2O2","Q2","The any() function returns True if any item in the list evaluates to True. Otherwise, it returns False.", None, 1)
# insert_question_option("Q2O3","Q2",'The any() function takes as arguments the list to check inside, and the item to check for. If "any" of the items in the list match the item to check for, the function returns True.', None, 0)
# insert_question_option("Q2O4","Q2",'The any() function returns a Boolean value that answers the question "Are there any items in this list?"', None, 0)

# insert_question("Q3","Information technology (IT)","Python programming", "What data structure does a binary tree degenerate to if it isn't balanced properly?", None, "Hard", "Multiple choice", 2, "chris89")
# insert_question_option("Q3O1","Q3","Linked list", None, 1)
# insert_question_option("Q3O2","Q3","Queue", None, 0)
# insert_question_option("Q3O3","Q3","Set", None, 0)
# insert_question_option("Q3O4","Q3","OrderedDict", None, 0)

# insert_question("Q4","Information technology (IT)","Python programming", "What statement about static methods is true?", None, "Hard", "Multiple choice", 2, "chris89")
# insert_question_option("Q4O1","Q4","Static methods are called static because they always return None.", None, 0)
# insert_question_option("Q4O2","Q4","Static methods can be bound to either a class or an instance of a class.", None, 0)
# insert_question_option("Q4O3","Q4","Static methods serve mostly as utility methods or helper methods since they can't access or modify a class's state.", None, 1)
# insert_question_option("Q4O4","Q4","Static methods can access and modify the state of a class or an instance of a class.", None, 0)

# insert_question("Q5","Information technology (IT)","Python programming", "What are attributes?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q5O1","Q5","Attributes are long-form versions of an if/else statement, used when testing for equality between objects.", None, 0)
# insert_question_option("Q5O2","Q5","Attributes are a way to hold data or describe a state for a class or an instance of a class.", None, 1)
# insert_question_option("Q5O3","Q5","Attributes are strings that describe characteristics of a class.", None, 0)
# insert_question_option("Q5O4","Q5",'Function arguments are called "attributes" in the context of class methods and instance methods.', None, 0)

# insert_question("Q6","Information technology (IT)","Python programming", "What is the term to describe this code? \ncount, fruit, price = (2, 'apple', 3.5)", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q6O1","Q6","Tuple assignment.", None, 0)
# insert_question_option("Q6O2","Q6","Tuple unpacking.", None, 1)
# insert_question_option("Q6O3","Q6","Tuple matching.", None, 0)
# insert_question_option("Q6O4","Q6","Tuple duplication.", None, 0)

# insert_question("Q7","Information technology (IT)","Python programming", "What built-in list method would you use to remove items from a list?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q7O1","Q7",".delete() method", None, 0)
# insert_question_option("Q7O2","Q7","pop(my_list)", None, 0)
# insert_question_option("Q7O3","Q7","del(my_list)", None, 0)
# insert_question_option("Q7O4","Q7",".pop() method", None, 1)

# insert_question("Q8","Information technology (IT)","Python programming", "What is one of the most common uses of Python's sys library?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q8O1","Q8","To capture command-line arguments given at a file's runtime.", None, 1)
# insert_question_option("Q8O2","Q8","To connect various systems, such as connecting a web front end, an API service, a database, and a mobile app.", None, 0)
# insert_question_option("Q8O3","Q8","To take a snapshot of all the packages and libraries in your virtual environment.", None, 0)
# insert_question_option("Q8O4","Q8","To scan the health of your Python ecosystem while inside a virtual environment.", None, 0)

# insert_question("Q9","Information technology (IT)","Python programming", "What is the runtime of accessing a value in a dictionary by using its key?", None, "Hard", "Multiple choice", 2, "chris89")
# insert_question_option("Q9O1","Q9","O(n), also called linear time.", None, 0)
# insert_question_option("Q9O2","Q9","O(log n), also called logarithmic time.", None, 0)
# insert_question_option("Q9O3","Q9","O(n^2), also called quadratic time.", None, 0)
# insert_question_option("Q9O4","Q9","O(1), also called constant time.", None, 1)

# insert_question("Q10","Information technology (IT)","Python programming", "What is the correct syntax for defining a class called Game, if it inherits from a parent class called LogicGame?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q10O1","Q10","class Game(LogicGame): pass", None, 1)
# insert_question_option("Q10O2","Q10","def Game(LogicGame): pass", None, 0)
# insert_question_option("Q10O3","Q10","def Game.LogicGame(): pass", None, 0)
# insert_question_option("Q10O4","Q10","class Game.LogicGame(): pass", None, 0)

# insert_question("Q11","Information technology (IT)","Python programming", "What is the proper format for writing a doctest?", None, "Hard", "Multiple choice", 2, "chris89")
# insert_question_option("Q11O1","Q11",'''def sum(a, b):
#     """
#     sum(4, 3)
#     7

#     sum(-4, 5)
#     1
#     """
#     return a + b''', None, 0)
# insert_question_option("Q11O2","Q11",'''def sum(a, b):
#     """
#     >>> sum(4, 3)
#     7

#     >>> sum(-4, 5)
#     1
#     """
#     return a + b''', None, 1)
# insert_question_option("Q11O3","Q11",'''def sum(a, b):
#     """
#     # >>> sum(4, 3)
#     # 7

#     # >>> sum(-4, 5)
#     # 1
#     """
#     return a + b''', None, 0)
# insert_question_option("Q11O4","Q11",'''def sum(a, b):
#     ###
#     >>> sum(4, 3)
#     7

#     >>> sum(-4, 5)
#     1
#     ###
#     return a + b''', None, 0)

# insert_question("Q12","Information technology (IT)","Python programming", "What built-in Python data type is commonly used to represent a stack?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q12O1","Q12","set", None, 0)
# insert_question_option("Q12O2","Q12","list", None, 1)
# insert_question_option("Q12O3","Q12","dict", None, 0)
# insert_question_option("Q12O4","Q12","You can only build a stack from scratch.", None, 0)

# insert_question("Q13","Information technology (IT)","Python programming", """What would this expression return?
# college_years = ['Freshman', 'Sophomore', 'Junior', 'Senior']
# return list(enumerate(college_years, 2019))""", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q13O1","Q13","[('Freshman', 2019), ('Sophomore', 2020), ('Junior', 2021), ('Senior', 2022)]", None, 0)
# insert_question_option("Q13O2","Q13","[(2019, 2020, 2021, 2022), ('Freshman', 'Sophomore', 'Junior', 'Senior')]", None, 0)
# insert_question_option("Q13O3","Q13","[('Freshman', 'Sophomore', 'Junior', 'Senior'), (2019, 2020, 2021, 2022)]", None, 0)
# insert_question_option("Q13O4","Q13","[(2019, 'Freshman'), (2020, 'Sophomore'), (2021, 'Junior'), (2022, 'Senior')]", None, 1)

# insert_question("Q14","Information technology (IT)","Python programming", 'What is the purpose of the "self" keyword when defining or calling instance methods?', None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q14O1","Q14","self means that no other arguments are required to be passed into the method.", None, 0)
# insert_question_option("Q14O2","Q14","There is no real purpose for the self method; it's just historic computer science jargon that Python keeps to stay consistent with other programming languages.", None, 0)
# insert_question_option("Q14O3","Q14","self refers to the instance whose method was called.", None, 1)
# insert_question_option("Q14O4","Q14","self refers to the class that was inherited from to create the object using self.", None, 0)

# insert_question("Q15","Information technology (IT)","Python programming", "Which of these is NOT a characteristic of namedtuples?", None, "Hard", "Multiple choice", 2, "chris89")
# insert_question_option("Q15O1","Q15","You can assign a name to each of the namedtuple members and refer to them that way, similarly to how you would access keys in dictionary.", None, 0)
# insert_question_option("Q15O2","Q15","Each member of a namedtuple object can be indexed directly, just like in a regular tuple.", None, 0)
# insert_question_option("Q15O3","Q15","namedtuples are just as memory efficient as regular tuples.", None, 0)
# insert_question_option("Q15O4","Q15","No import is needed to use namedtuples because they are available in the standard library.", None, 1)

# insert_question("Q16","Information technology (IT)","Python programming", "What is an instance method?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q16O1","Q16","Instance methods can modify the state of an instance or the state of its parent class.", None, 1)
# insert_question_option("Q16O2","Q16","Instance methods hold data related to the instance.", None, 0)
# insert_question_option("Q16O3","Q16","An instance method is any class method that doesn't take any arguments.", None, 0)
# insert_question_option("Q16O4","Q16","An instance method is a regular function that belongs to a class, but it must return None.", None, 0)

# insert_question("Q17","Information technology (IT)","Python programming", "Which statement does NOT describe the object-oriented programming concept of encapsulation?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q17O1","Q17","It protects the data from outside interference.", None, 0)
# insert_question_option("Q17O2","Q17","A parent class is encapsulated and no data from the parent class passes on to the child class.", None, 0)
# insert_question_option("Q17O3","Q17"," It keeps data and the methods that can manipulate that data in one place.", None, 0)
# insert_question_option("Q17O4","Q17","It only allows the data to be changed by methods.", None, 1)

# insert_question("Q18","Information technology (IT)","Python programming", "What is the use of an if/else statement?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q18O1","Q18","It tells the computer which chunk of code to run if the instructions you coded are incorrect.", None, 0)
# insert_question_option("Q18O2","Q18","It runs one chunk of code if all the imports were successful, and another chunk of code if the imports were not successful.", None, 0)
# insert_question_option("Q18O3","Q18","It executes one chunk of code if a condition is true, but a different chunk of code if the condition is false.", None, 1)
# insert_question_option("Q18O4","Q18","It tells the computer which chunk of code to run if the is enough memory to handle it, and which chunk of code to run if there is not enough memory to handle it.", None, 0)

# insert_question("Q19","Information technology (IT)","Python programming", "What built-in Python data type is best suited for implementing a queue?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q19O1","Q19","dict", None, 0)
# insert_question_option("Q19O2","Q19","set", None, 0)
# insert_question_option("Q19O3","Q19","None. You can only build a queue from scratch.", None, 0)
# insert_question_option("Q19O4","Q19","list", None, 1)

# insert_question("Q20","Information technology (IT)","Python programming", "What is the correct syntax for instantiating a new object of the type Game?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q20O1","Q20","my_game = class.Game()", None, 0)
# insert_question_option("Q20O2","Q20","my_game = class(Game)", None, 0)
# insert_question_option("Q20O3","Q20","my_game = Game()", None, 1)
# insert_question_option("Q20O4","Q20","my_game = Game.create()", None, 0)

# insert_question("Q21","Information technology (IT)","Python programming", "What does the built-in map() function do?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q21O1","Q21","It creates a path from multiple values in an iterable to a single value.", None, 0)
# insert_question_option("Q21O2","Q21","It applies a function to each item in an iterable and returns the value of that function.", None, 1)
# insert_question_option("Q21O3","Q21","It converts a complex value type into simpler value types.", None, 0)
# insert_question_option("Q21O4","Q21","It creates a mapping between two different elements of different iterables.", None, 0)

# insert_question("Q22","Information technology (IT)","Python programming", "If you don't explicitly return a value from a function, what happens?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q22O1","Q22","The function will return a RuntimeError if you don't return a value.", None, 0)
# insert_question_option("Q22O2","Q22","If the return keyword is absent, the function will return None.", None, 1)
# insert_question_option("Q22O3","Q22","If the return keyword is absent, the function will return True.", None, 0)
# insert_question_option("Q22O4","Q22","The function will enter an infinite loop because it won't know when to stop executing its code.", None, 0)

# insert_question("Q23","Information technology (IT)","Python programming", "What is the purpose of the pass statement in Python?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q23O1","Q23","It is used to skip the yield statement of a generator and return a value of None.", None, 0)
# insert_question_option("Q23O2","Q23","It is a null operation used mainly as a placeholder in functions, classes, etc.", None, 1)
# insert_question_option("Q23O3","Q23","It is used to pass control from one statement block to another.", None, 0)
# insert_question_option("Q23O4","Q23","It is used to skip the rest of a while or for loop and return to the start of the loop.", None, 0)

# insert_question("Q24","Information technology (IT)","Python programming", "What is the term used to describe items that may be passed into a function?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q24O1","Q24","arguments", None, 1)
# insert_question_option("Q24O2","Q24","paradigms", None, 0)
# insert_question_option("Q24O3","Q24","attributes", None, 0)
# insert_question_option("Q24O4","Q24","decorators", None, 0)

# insert_question("Q25","Information technology (IT)","Python programming", "Which collection type is used to associate values with unique keys?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q25O1","Q25","slot", None, 0)
# insert_question_option("Q25O2","Q25","dictionary", None, 1)
# insert_question_option("Q25O3","Q25","queue", None, 0)
# insert_question_option("Q25O4","Q25","sorted list", None, 0)

# insert_question("Q26","Information technology (IT)","Python programming", "When does a For loop stop iterating?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q26O1","Q26","when it encounters an infinite loop", None, 0)
# insert_question_option("Q26O2","Q26","when it encounters an if/else statement that contains a break keyword", None, 0)
# insert_question_option("Q26O3","Q26","when it has assessed each item in the iterable it is working on or a break keyword is encountered", None, 1)
# insert_question_option("Q26O4","Q26","when the runtime for the loop exceeds O(n^2)", None, 0)

# insert_question("Q27","Information technology (IT)","Python programming", "Assuming the node is in a singly linked list, what is the runtime complexity of searching for a specific node within a singly linked list?", None, "Hard", "Multiple choice", 2, "christinalee")
# insert_question_option("Q27O1","Q27","The runtime is O(n) because in the worst case, the node you are searching for is the last node, and every node in the linked list must be visited.", None, 1)
# insert_question_option("Q27O2","Q27","The runtime is O(nk), with n representing the number of nodes and k representing the amount of time it takes to access each node in memory.", None, 0)
# insert_question_option("Q27O3","Q27","The runtime cannot be determined unless you know how many nodes are in the singly linked list.", None, 0)
# insert_question_option("Q27O4","Q27","The runtime is O(1) because you can index directly to a node in a singly linked list.", None, 0)

# insert_question("Q28","Information technology (IT)","Python programming", """Given the following three lists, how would you create a new list that matches the desired output printed below?
# fruits = ['Apples', 'Oranges', 'Bananas']
# quantities = [5, 3, 4]
# prices = [1.50, 2.25, 0.89]

# #Desired output
# [('Apples', 5, 1.50),
# ('Oranges', 3, 2.25),
# ('Bananas', 4, 0.89)]""", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q28O1","Q28","""output = []

# fruit_tuple_0 = (first[0], quantities[0], price[0])
# output.append(fruit_tuple)

# fruit_tuple_1 = (first[1], quantities[1], price[1])
# output.append(fruit_tuple)

# fruit_tuple_2 = (first[2], quantities[2], price[2])
# output.append(fruit_tuple)

# return output""", None, 0)
# insert_question_option("Q28O2","Q28","""i = 0
# output = []
# for fruit in fruits:
#     temp_qty = quantities[i]
#     temp_price = prices[i]
#     output.append((fruit, temp_qty, temp_price))
#     i += 1
# return output""", None, 1)
# insert_question_option("Q28O3","Q28","""groceries = zip(fruits, quantities, prices)
# return groceries

# >>> [
# ('Apples', 5, 1.50),
# ('Oranges', 3, 2.25),
# ('Bananas', 4, 0.89)
# ]""", None, 0)
# insert_question_option("Q28O4","Q28","""i = 0
# output = []
# for fruit in fruits:
#     for qty in quantities:
#         for price in prices:
#             output.append((fruit, qty, price))
#     i += 1
# return output""", None, 0)

# insert_question("Q29","Information technology (IT)","Python programming", "What happens when you use the built-in function all() on a list?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q29O1","Q29",'The all() function returns a Boolean value that answers the question "Are all the items in this list the same?', None, 0)
# insert_question_option("Q29O2","Q29","The all() function returns True if all the items in the list can be converted to strings. Otherwise, it returns False.", None, 0)
# insert_question_option("Q29O3","Q29","The all() function will return all the values in the list.", None, 0)
# insert_question_option("Q29O4","Q29","The all() function returns True if all items in the list are evaluated to True. Otherwise, it returns False.", None, 1)

# insert_question("Q30","Information technology (IT)","Python programming", "What is the correct syntax for calling an instance method on a class named Game?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q30O1","Q30",""">>> dice = Game()
# >>> dice.roll()""", None, 1)
# insert_question_option("Q30O2","Q30",""">>> dice = Game(self)
# >>> dice.roll(self)""", None, 0)
# insert_question_option("Q30O3","Q30",""">>> dice = Game()
# >>> dice.roll(self)""", None, 0)
# insert_question_option("Q30O4","Q30",""">>> dice = Game(self)
# >>> dice.roll()""", None, 0)

# insert_question("Q31","Information technology (IT)","Python programming", "What is the algorithmic paradigm of quick sort?", None, "Hard", "Multiple choice", 2, "christinalee")
# insert_question_option("Q31O1","Q31","Backtracking", None, 0)
# insert_question_option("Q31O2","Q31","Dynamic programming", None, 0)
# insert_question_option("Q31O3","Q31","Decrease and conquer", None, 0)
# insert_question_option("Q31O4","Q31","Divide and conquer", None, 1)

# insert_question("Q32","Information technology (IT)","Python programming", "What is the runtime complexity of the list's built-in .append() method?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q32O1","Q32","O(1), also called constant time.", None, 1)
# insert_question_option("Q32O2","Q32","O(log n), also called logarithmic time.", None, 0)
# insert_question_option("Q32O3","Q32","O(n^2), also called quadratic time.", None, 0)
# insert_question_option("Q32O4","Q32","O(n), also called linear time.", None, 0)

# insert_question("Q33","Information technology (IT)","Python programming", "What is the key difference between a set and a list?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q33O1","Q33","A set is an ordered collection of unique items. A list is an unordered collection of non-unique items.", None, 0)
# insert_question_option("Q33O2","Q33","Elements can be retrieved from a list but they cannot be retrieved from a set.", None, 0)
# insert_question_option("Q33O3","Q33","A set is an ordered collection of non-unique items. A list is an unordered collection of unique items.", None, 0)
# insert_question_option("Q33O4","Q33","A set is an unordered collection of unique items. A list is an ordered collection of non-unique items.", None, 1)

# insert_question("Q34","Information technology (IT)","Python programming", "What is the definition of abstraction as applied to object-oriented Python?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q34O1","Q34","Abstraction means that a different style of code can be used since many details are already known to the program behind the scenes.", None, 0)
# insert_question_option("Q34O2","Q34","Abstraction means the implementation is hidden from the user, and only the relevant data or information is shown.", None, 1)
# insert_question_option("Q34O3","Q34","Abstraction means that the data and the functionality of a class are combined into one entity.", None, 0)
# insert_question_option("Q34O4","Q34","Abstraction means that a class can inherit from more than one parent class.", None, 0)

# insert_question("Q35","Information technology (IT)","Python programming", """What does this function print?
# def print_alpha_nums(abc_list, num_list):
#     for char in abc_list:
#         for num in num_list:
#             print(char, num)
#     return

# print_alpha_nums(['a', 'b', 'c'], [1, 2, 3])""", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q35O1","Q35","""a 1
# a 2
# a 3
# b 1
# b 2
# b 3
# c 1
# c 2
# c 3""", None, 1)
# insert_question_option("Q35O2","Q35","""['a', 'b', 'c'], [1, 2, 3]""", None, 0)
# insert_question_option("Q35O3","Q35","""aaa
# bbb
# ccc
# 111
# 222
# 333""", None, 0)
# insert_question_option("Q35O4","Q35","""a 1 2 3
# b 1 2 3
# c 1 2 3""", None, 0)

# insert_question("Q36","Information technology (IT)","Python programming", "Pick the correct representation of doctest for a function in Python.", None, "Hard", "Multiple choice", 2, "christinalee")
# insert_question_option("Q36O1","Q36",'''def sum(a, b):
#     # a = 1
#     # b = 2
#     # sum(a, b) = 3

#     return a + b''', None, 0)
# insert_question_option("Q36O2","Q36",'''def sum(a, b):
#     """
#     a = 1
#     b = 2
#     sum(a, b) = 3
#     """

#     return a + b''', None, 0)
# insert_question_option("Q36O3","Q36",'''def sum(a, b):
#     """
#     >>> a = 1
#     >>> b = 2
#     >>> sum(a, b)
#     3
#     """

#     return a + b''', None, 1)
# insert_question_option("Q36O4","Q36","""def sum(a, b):
#     '''
#     a = 1
#     b = 2
#     sum(a, b) = 3
#     '''
#     return a + b""", None, 0)

# insert_question("Q37","Information technology (IT)","Python programming", "Suppose a Game class inherits from two parent classes: BoardGame and LogicGame. Which statement is true about the methods of an object instantiated from the Game class?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q37O1","Q37","When instantiating an object, the object doesn't inherit any of the parent class's methods.", None, 0)
# insert_question_option("Q37O2","Q37","When instantiating an object, the object will inherit the methods of whichever parent class has more methods.", None, 0)
# insert_question_option("Q37O3","Q37","When instantiating an object, the programmer must specify which parent class to inherit methods from.", None, 0)
# insert_question_option("Q37O4","Q37","An instance of the Game class will inherit whatever methods the BoardGame and LogicGame classes have.", None, 1)

# insert_question("Q38","Information technology (IT)","Python programming", "What does calling namedtuple on a collection type return?", None, "Hard", "Multiple choice", 2, "christinalee")
# insert_question_option("Q38O1","Q38","a generic object class with iterable parameter fields", None, 0)
# insert_question_option("Q38O2","Q38","a generic object class with non-iterable named fields", None, 0)
# insert_question_option("Q38O3","Q38","a tuple subclass with non-iterable parameter fields", None, 0)
# insert_question_option("Q38O4","Q38","a tuple subclass with iterable named fields", None, 1)

# insert_question("Q39","Information technology (IT)","Python programming", "What symbol(s) do you use to assess equality between two elements?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q39O1","Q39","&&", None, 0)
# insert_question_option("Q39O2","Q39","=", None, 0)
# insert_question_option("Q39O3","Q39","==", None, 1)
# insert_question_option("Q39O4","Q39","||", None, 0)

# insert_question("Q40","Information technology (IT)","Python programming", """Review the code below. What is the correct syntax for changing the price to 1.5?
# fruit_info = {
#   'fruit': 'apple',
#   'count': 2,
#   'price': 3.5
# }""", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q40O1","Q40","fruit_info ['price'] = 1.5", None, 1)
# insert_question_option("Q40O2","Q40","my_list [3.5] = 1.5", None, 0)
# insert_question_option("Q40O3","Q40","1.5 = fruit_info ['price]", None, 0)
# insert_question_option("Q40O4","Q40","my_list['price'] == 1.5", None, 0)

# insert_question("Q41","Information technology (IT)","Python programming", "What value would be returned by this check for equality? \n5 != 6", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q41O1","Q41","yes", None, 0)
# insert_question_option("Q41O2","Q41","False", None, 0)
# insert_question_option("Q41O3","Q41","True", None, 1)
# insert_question_option("Q41O4","Q41","None", None, 0)

# insert_question("Q42","Information technology (IT)","Python programming", "What does a class's __init__() method do?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q42O1","Q42","It makes classes aware of each other if more than one class is defined in a single code file.", None, 0)
# insert_question_option("Q42O2","Q42","It is included to preserve backward compatibility from Python 3 to Python 2, but it no longer needs to be used in Python 3.", None, 0)
# insert_question_option("Q42O3","Q42","It is a method that acts as a constructor and is called automatically whenever a new object is created from a class. It sets the initial state of a new object.", None, 1)
# insert_question_option("Q42O4","Q42","It initializes any imports you may have included at the top of your file.", None, 0)

# insert_question("Q43","Information technology (IT)","Python programming", 'What is meant by the phrase "space complexity"?', None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q43O1","Q43","How many microprocessors it would take to run your code in less than one second", None, 0)
# insert_question_option("Q43O2","Q43","How many lines of code are in your code file", None, 0)
# insert_question_option("Q43O3","Q43","The amount of space taken up in memory as a function of the input size", None, 1)
# insert_question_option("Q43O4","Q43","How many copies of the code file could fit in 1 GB of memory", None, 0)

# insert_question("Q44","Information technology (IT)","Python programming", "What is the correct syntax for creating a variable that is bound to a dictionary?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q44O1","Q44","fruit_info = {'fruit': 'apple', 'count': 2, 'price': 3.5}", None, 1)
# insert_question_option("Q44O2","Q44","fruit_info =('fruit': 'apple', 'count': 2,'price': 3.5 ).dict()", None, 0)
# insert_question_option("Q44O3","Q44","fruit_info = ['fruit': 'apple', 'count': 2,'price': 3.5 ].dict()", None, 0)
# insert_question_option("Q44O4","Q44","fruit_info = to_dict('fruit': 'apple', 'count': 2, 'price': 3.5)", None, 0)

# insert_question("Q45","Information technology (IT)","Python programming", """What is the proper way to write a list comprehension that represents all the keys in this dictionary?
# fruits = {'Apples': 5, 'Oranges': 3, 'Bananas': 4}""", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q45O1","Q45","fruit_names = [x in fruits.keys() for x]", None, 0)
# insert_question_option("Q45O2","Q45","fruit_names = for x in fruits.keys() *", None, 0)
# insert_question_option("Q45O3","Q45","fruit_names = [x for x in fruits.keys()]", None, 1)
# insert_question_option("Q45O4","Q45","fruit_names = x for x in fruits.keys()", None, 0)

# insert_question("Q46","Information technology (IT)","Python programming", "What is the purpose of the self keyword when defining or calling methods on an instance of an object?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q46O1","Q46","self refers to the class that was inherited from to create the object using self.", None, 0)
# insert_question_option("Q46O2","Q46","There is no real purpose for the self method. It's just legacy computer science jargon that Python keeps to stay consistent with other programming languages.", None, 0)
# insert_question_option("Q46O3","Q46","self means that no other arguments are required to be passed into the method.", None, 0)
# insert_question_option("Q46O4","Q46","self refers to the instance whose method was called.", None, 1)

# insert_question("Q47","Information technology (IT)","Python programming", "What statement about the class methods is true?", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q47O1","Q47","A class method is a regular function that belongs to a class, but it must return None.", None, 0)
# insert_question_option("Q47O2","Q47","A class method can modify the state of the class, but it can't directly modify the state of an instance that inherits from that class.", None, 1)
# insert_question_option("Q47O3","Q47","A class method is similar to a regular function, but a class method doesn't take any arguments.", None, 0)
# insert_question_option("Q47O4","Q47","A class method holds all of the data for a particular class.", None, 0)

# insert_question("Q48","Information technology (IT)","Python programming", "What does it mean for a function to have linear runtime?", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q48O1","Q48","You did not use very many advanced computer programming concepts in your code.", None, 0)
# insert_question_option("Q48O2","Q48","The difficulty level your code is written at is not that high.", None, 0)
# insert_question_option("Q48O3","Q48","It will take your program less than half a second to run.", None, 0)
# insert_question_option("Q48O4","Q48","The amount of time it takes the function to complete grows linearly as the input size increases.", None, 1)

# insert_question("Q49","Information technology (IT)","Python programming", "What is the proper way to define a function?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q49O1","Q49","def getMaxNum(list_of_nums): # body of function goes here", None, 0)
# insert_question_option("Q49O2","Q49","func get_max_num(list_of_nums): # body of function goes here", None, 0)
# insert_question_option("Q49O3","Q49","func getMaxNum(list_of_nums): # body of function goes here", None, 0)
# insert_question_option("Q49O4","Q49","def get_max_num(list_of_nums): # body of function goes here", None, 1)

# insert_question("Q50","Information technology (IT)","Python programming", "According to the PEP 8 coding style guidelines, how should constant values be named in Python?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q50O1","Q50","in camel case without using underscores to separate words -- e.g. maxValue = 255", None, 0)
# insert_question_option("Q50O2","Q50","in lowercase with underscores to separate words -- e.g. max_value = 255", None, 0)
# insert_question_option("Q50O3","Q50","in all caps with underscores separating words -- e.g. MAX_VALUE = 255", None, 1)
# insert_question_option("Q50O4","Q50","in the mixed case without using underscores to separate words -- e.g. MaxValue = 255", None, 0)

# insert_question("Q51","Information technology (IT)","Python programming", "Describe the functionality of a deque.", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q51O1","Q51","A deque adds items to one side and removes items from the other side.", None, 0)
# insert_question_option("Q51O2","Q51","A deque adds items to either or both sides but only removes items from the top.", None, 0)
# insert_question_option("Q51O3","Q51","A deque adds items at either or both ends and removes items at either or both ends.", None, 1)
# insert_question_option("Q51O4","Q51","A deque adds items only to the top but removes them from either or both sides.", None, 0)

# insert_question("Q52","Information technology (IT)","Python programming", "What is the correct syntax for creating a variable that is bound to a set?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q52O1","Q52","my_set = {0, 'apple', 3.5}", None, 1)
# insert_question_option("Q52O2","Q52","my_set = to_set(0, 'apple', 3.5)", None, 0)
# insert_question_option("Q52O3","Q52","my_set = (0, 'apple', 3.5).to_set()", None, 0)
# insert_question_option("Q52O4","Q52","my_set = (0, 'apple', 3.5).set()", None, 0)

# insert_question("Q53","Information technology (IT)","Python programming", "What is the correct syntax for defining an __init__() method that takes no parameters?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q53O1","Q53","""class __init__(self):
#     pass""", None, 0)
# insert_question_option("Q53O2","Q53","""def __init__():
#     pass""", None, 0)
# insert_question_option("Q53O3","Q53","""class __init__():
#     pass""", None, 0)
# insert_question_option("Q53O4","Q53","""def __init__(self):
#     pass""", None, 1)

# insert_question("Q54","Information technology (IT)","Python programming", "Which of the following is TRUE About how numeric data would be organized in a Binary Search Tree?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q54O1","Q54","For any given node in a binary search tree, the value of the node is greater than all the values in the node's left subtree and less than the ones in its right subtree.", None, 1)
# insert_question_option("Q54O2","Q54","Binary Search Tree cannot be used to organize and search through numeric data, given the complications that arise with very deep trees.", None, 0)
# insert_question_option("Q54O3","Q54","The top node of the binary search tree would be an arbitrary number. All the nodes to the left of the top node need to be less than the top node's number, but they don't need to be ordered in any particular way.", None, 0)
# insert_question_option("Q54O4","Q54","The smallest numeric value would go in the topmost node. The next highest number would go in its left child node, the the next highest number after that would go in its right child node. This pattern would continue until all numeric values were in their node.", None, 0)

# insert_question("Q55","Information technology (IT)","Python programming", "Why would you use a decorator?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q55O1","Q55","A decorator is similar to a class and should be used if you are doing functional programming instead of object-oriented programming.", None, 0)
# insert_question_option("Q55O2","Q55","A decorator is a visual indicator to someone reading your code that a portion of your code is critical and should not be changed.", None, 0)
# insert_question_option("Q55O3","Q55","You use the decorator to alter the functionality of a function without having to modify the function code.", None, 1)
# insert_question_option("Q55O4","Q55","An import statement is preceded by a decorator, python knows to import the most recent version of whatever package or library is being imported.", None, 0)

# insert_question("Q56","Information technology (IT)","Python programming", "When would you use a for loop?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q56O1","Q56","Only in some situations, as loops are used only for certain types of programming.", None, 0)
# insert_question_option("Q56O2","Q56","When you need to check every element in an iterable of known length.", None, 1)
# insert_question_option("Q56O3","Q56","When you want to minimize the use of strings in your code.", None, 0)
# insert_question_option("Q56O4","Q56","When you want to run code in one file for a function in another file.", None, 0)

# insert_question("Q57","Information technology (IT)","Python programming", "What is the most self-descriptive way to define a function that calculates sales tax on a purchase?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q57O1","Q57","""def tax(my_float):
#     ''' Calculates the sales tax of a purchase. Takes in a float representing the subtotal as an argument and returns a float representing the sales tax.'''
#     pass""", None, 0)
# insert_question_option("Q57O2","Q57","""def tx(amt):
#     ''' Gets the tax on an amount.'''""", None, 0)
# insert_question_option("Q57O3","Q57","""def sales_tax(amount):
#     ''' Calculates the sales tax of a purchase. Takes in a float representing the subtotal as an argument and returns a float representing the sales tax.'''
# """, None, 0)
# insert_question_option("Q57O4","Q57","""def calculate_sales_tax(subtotal):
#     pass""", None, 1)

# insert_question("Q58","Information technology (IT)","Python programming", "What would happen if you did not alter the state of the element that an algorithm is operating on recursively?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q58O1","Q58","You do not have to alter the state of the element the algorithm is recursing on.", None, 0)
# insert_question_option("Q58O2","Q58","You would eventually get a KeyError when the recursive portion of the code ran out of items to recurse on.", None, 0)
# insert_question_option("Q58O3","Q58","You would get a RuntimeError: maximum recursion depth exceeded.", None, 1)
# insert_question_option("Q58O4","Q58","The function using recursion would return None.", None, 0)

# insert_question("Q59","Information technology (IT)","Python programming", "What is the runtime complexity of searching for an item in a binary search tree?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q59O1","Q59","The runtime for searching in a binary search tree is O(1) because each node acts as a key, similar to a dictionary.", None, 0)
# insert_question_option("Q59O2","Q59","The runtime for searching in a binary search tree is O(n!) because every node must be compared to every other node.", None, 0)
# insert_question_option("Q59O3","Q59","The runtime for searching in a binary search tree is generally O(h), where h is the height of the tree.", None, 1)
# insert_question_option("Q59O4","Q59","The runtime for searching in a binary search tree is O(n) because every node in the tree must be visited.", None, 0)

# insert_question("Q60","Information technology (IT)","Python programming", "Why would you use mixin?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q60O1","Q60","You use a mixin to force a function to accept an argument at runtime even if the argument wasn't included in the function's definition.", None, 0)
# insert_question_option("Q60O2","Q60","You use a mixin to allow a decorator to accept keyword arguments.", None, 0)
# insert_question_option("Q60O3","Q60","You use a mixin to make sure that a class's attributes and methods don't interfere with global variables and functions.", None, 0)
# insert_question_option("Q60O4","Q60","If you have many classes that all need to have the same functionality, you'd use a mixin to define that functionality.", None, 1)

# insert_question("Q61","Information technology (IT)","Python programming", "Why would you use a virtual environment?", None, "Hard", "Multiple choice", 2, "ezhang")
# insert_question_option("Q61O1","Q61","Virtual environments create a 'bubble' around your project so that any libraries or packages you install within it don't affect your entire machine.", None, 1)
# insert_question_option("Q61O2","Q61","Teams with remote employees use virtual environments so they can share code, do code reviews, and collaborate remotely.", None, 0)
# insert_question_option("Q61O3","Q61","Virtual environments were common in Python 2 because they augmented missing features in the language. Virtual environments are not necessary in Python 3 due to advancements in the language.", None, 0)
# insert_question_option("Q61O4","Q61","Virtual environments are tied to your GitHub or Bitbucket account, allowing you to access any of your repos virtually from any machine.", None, 0)

# insert_question("Q62","Information technology (IT)","Python programming", "What is the runtime complexity of adding an item to a stack and removing an item from a stack?", None, "Hard", "Multiple choice", 2, "fpeck")
# insert_question_option("Q62O1","Q62","Add items to a stack in O(1) time and remove items from a stack on O(n) time.", None, 0)
# insert_question_option("Q62O2","Q62","Add items to a stack in O(1) time and remove items from a stack in O(1) time.", None, 1)
# insert_question_option("Q62O3","Q62","Add items to a stack in O(n) time and remove items from a stack on O(1) time.", None, 0)
# insert_question_option("Q62O4","Q62","Add items to a stack in O(n) time and remove items from a stack in O(n) time.", None, 0)

# insert_question("Q63","Information technology (IT)","Python programming", "Which statement accurately describes how items are added to and removed from a stack?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q63O1","Q63","a stack adds items to one side and removes items from the other side.", None, 0)
# insert_question_option("Q63O2","Q63","a stack adds items to the top and removes items from the top.", None, 1)
# insert_question_option("Q63O3","Q63","a stack adds items to the top and removes items from anywhere in the stack.", None, 0)
# insert_question_option("Q63O4","Q63","a stack adds items to either end and removes items from either end.", None, 0)

# insert_question("Q64","Information technology (IT)","Python programming", "What is a base case in a recursive function?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q64O1","Q64","A base case is the condition that allows the algorithm to stop recursing. It is usually a problem that is small enough to solve directly.", None, 1)
# insert_question_option("Q64O2","Q64","The base case is a summary of the overall problem that needs to be solved.", None, 0)
# insert_question_option("Q64O3","Q64","The base case is passed in as an argument to a function whose body makes use of recursion.", None, 0)
# insert_question_option("Q64O4","Q64","The base case is similar to a base class, in that it can be inherited by another object.", None, 0)

# insert_question("Q65","Information technology (IT)","Python programming", "Why is it considered good practice to open a file from within a Python script by using the with keyword?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q65O1","Q65","The with keyword lets you choose which application to open the file in.", None, 0)
# insert_question_option("Q65O2","Q65","The with keyword acts like a for loop, and lets you access each line in the file one by one.", None, 0)
# insert_question_option("Q65O3","Q65","There is no benefit to using the with keyword for opening a file in Python.", None, 0)
# insert_question_option("Q65O4","Q65","When you open a file using the with keyword in Python, Python will make sure the file gets closed, even if an exception or error is thrown.", None, 1)

# insert_question("Q66","Information technology (IT)","Python programming", "What is the correct way to run all the doctests in a given file from the command line?", None, "Hard", "Multiple choice", 2, "fpeck")
# insert_question_option("Q66O1","Q66","python3 -m doctest <_filename_>", None, 1)
# insert_question_option("Q66O2","Q66","python3 <_filename_>", None, 0)
# insert_question_option("Q66O3","Q66","python3 <_filename_> rundoctests", None, 0)
# insert_question_option("Q66O4","Q66","python3 doctest", None, 0)

# insert_question("Q67","Information technology (IT)","Python programming", "What is the correct way to call a function?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q67O1","Q67","get_max_num([57, 99, 31, 18])", None, 1)
# insert_question_option("Q67O2","Q67","call.(get_max_num)", None, 0)
# insert_question_option("Q67O3","Q67","def get_max_num([57, 99, 31, 18])", None, 0)
# insert_question_option("Q67O4","Q67","call.get_max_num([57, 99, 31, 18])", None, 0)

# insert_question("Q68","Information technology (IT)","Python programming", "What is a lambda function?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q68O1","Q68","any function that makes use of scientific or mathematical constants, often represented by Greek letters in academic writing", None, 0)
# insert_question_option("Q68O2","Q68","a function that gets executed when decorators are used", None, 0)
# insert_question_option("Q68O3","Q68","any function whose definition is contained within five lines of code or fewer", None, 0)
# insert_question_option("Q68O4","Q68","a small, anonymous function that can take any number of arguments but has only expression to evaluate", None, 1)

# insert_question("Q69","Information technology (IT)","Python programming", "What is the primary difference between lists and tuples?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q69O1","Q69","You can access a specific element in a list by indexing to its position, but you cannot access a specific element in a tuple unless you iterate through the tuple", None, 0)
# insert_question_option("Q69O2","Q69","Lists are mutable, meaning you can change the data that is inside them at any time. Tuples are immutable, meaning you cannot change the data that is inside them once you have created the tuple.", None, 1)
# insert_question_option("Q69O3","Q69","Lists are immutable, meaning you cannot change the data that is inside them once you have created the list. Tuples are mutable, meaning you can change the data that is inside them at any time.", None, 0)
# insert_question_option("Q69O4","Q69","Lists can hold several data types inside them at once, but tuples can only hold the same data type if multiple elements are present.", None, 0)

# insert_question("Q70","Information technology (IT)","Python programming", "What does a generator return?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q70O1","Q70","None", None, 0)
# insert_question_option("Q70O2","Q70","An iterable object", None, 1)
# insert_question_option("Q70O3","Q70","A linked list data structure from a non-empty list", None, 0)
# insert_question_option("Q70O4","Q70","All the keys of the given dictionary", None, 0)

# insert_question("Q71","Information technology (IT)","Python programming", "What is the difference between class attributes and instance attributes?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q71O1","Q71","Instance attributes can be changed, but class attributes cannot be changed", None, 0)
# insert_question_option("Q71O2","Q71","Class attributes are shared by all instances of the class. Instance attributes may be unique to just that instance", None, 1)
# insert_question_option("Q71O3","Q71","There is no difference between class attributes and instance attributes", None, 0)
# insert_question_option("Q71O4","Q71","Class attributes belong just to the class, not to the instance of that class. Instance attributes are shared among all instances of a class", None, 0)

# insert_question("Q72","Information technology (IT)","Python programming", "What is the correct syntax for creating an instance method?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q72O1","Q72","""def get_next_card():
#   # method body goes here""", None, 0)
# insert_question_option("Q72O2","Q72","""def get_next_card(self):
#   # method body goes here""", None, 1)
# insert_question_option("Q72O3","Q72","""def self.get_next_card():
#   # method body goes here""", None, 0)
# insert_question_option("Q72O4","Q72","""def self.get_next_card(self):
#   # method body goes here""", None, 0)

# insert_question("Q73","Information technology (IT)","Python programming", "How do you add a comment to an existing Python script?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q73O1","Q73","-- This is a comment", None, 0)
# insert_question_option("Q73O2","Q73","# This is a comment", None, 1)
# insert_question_option("Q73O3","Q73","/* This is a comment */", None, 0)
# insert_question_option("Q73O4","Q73","// This is a comment", None, 0)

# insert_question("Q74","Information technology (IT)","Python programming", "What is the correct syntax for replacing the string apple in the list with the string orange? \nmy_list = ['kiwi', 'apple', 'banana']", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q74O1","Q74","orange = my_list[1]", None, 0)
# insert_question_option("Q74O2","Q74","my_list[1] = 'orange'", None, 1)
# insert_question_option("Q74O3","Q74","my_list['orange'] = 1", None, 0)
# insert_question_option("Q74O4","Q74","my_list[1] == orange", None, 0)

# insert_question("Q75","Information technology (IT)","Python programming", "What will happen if you use a while loop and forget to include logic that eventually causes the while loop to stop?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q75O1","Q75","Nothing will happen; your computer knows when to stop running the code in the while loop.", None, 0)
# insert_question_option("Q75O2","Q75","You will get a KeyError.", None, 0)
# insert_question_option("Q75O3","Q75","Your code will get stuck in an infinite loop.", None, 1)
# insert_question_option("Q75O4","Q75","You will get a WhileLoopError.", None, 0)

# insert_question("Q76","Information technology (IT)","Python programming", "Describe the functionality of a queue.", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q76O1","Q76","A queue adds items to either end and removes items from either end.", None, 1)
# insert_question_option("Q76O2","Q76","A queue adds items to the top and removes items from the top.", None, 0)
# insert_question_option("Q76O3","Q76","A queue adds items to the top and removes items from anywhere in, a list.", None, 0)
# insert_question_option("Q76O4","Q76","A queue adds items to the top and removes items from anywhere in the queue.", None, 0)

# insert_question("Q77","Information technology (IT)","Python programming", "Which choice is the most syntactically correct example of conditional branching?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q77O1","Q77",'''num_people = 5

# if num_people > 10:
#     print("There is a lot of people in the pool.")
# elif num_people > 4:
#     print("There are some people in the pool.")
# else:
#     print("There is no one in the pool.")''', None, 1)
# insert_question_option("Q77O2","Q77",'''num_people = 5

# if num_people > 10:
#     print("There is a lot of people in the pool.")
# if num_people > 4:
#     print("There are some people in the pool.")
# else:
#     print("There is no one in the pool.")''', None, 0)
# insert_question_option("Q77O3","Q77",'''num_people = 5

# if num_people > 10;
#     print("There is a lot of people in the pool.")
# elif num_people > 4;
#     print("There are some people in the pool.")
# else;
#     print("There is no one in the pool.")''', None, 0)
# insert_question_option("Q77O4","Q77",'''if num_people > 10;
#     print("There is a lot of people in the pool.")
# if num_people > 4;
#     print("There are some people in the pool.")
# else;
#     print("There is no one in the pool.")''', None, 0)

# insert_question("Q78","Information technology (IT)","Python programming", "How does defaultdict work?", None, "Hard", "Multiple choice", 2, "fpeck")
# insert_question_option("Q78O1","Q78","defaultdict will automatically create a dictionary for you that has keys which are the integers 0-10.", None, 0)
# insert_question_option("Q78O2","Q78","defaultdict forces a dictionary to only accept keys that are of the types specified when you created the defaultdict (such as strings or integers).", None, 0)
# insert_question_option("Q78O3","Q78","If you try to read from a defaultdict with a nonexistent key, a new default key-value pair will be created for you instead of throwing a KeyError.", None, 1)
# insert_question_option("Q78O4","Q78","defaultdict stores a copy of a dictionary in memory that you can default to if the original gets unintentionally modified.", None, 0)

# insert_question("Q79","Information technology (IT)","Python programming", "What is the correct syntax for adding a key called variety to the fruit_info dictionary that has a value of Red Delicious?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q79O1","Q79","fruit_info['variety'] == 'Red Delicious'", None, 0)
# insert_question_option("Q79O2","Q79","fruit_info['variety'] = 'Red Delicious'", None, 1)
# insert_question_option("Q79O3","Q79","red_delicious = fruit_info['variety']", None, 0)
# insert_question_option("Q79O4","Q79","red_delicious == fruit_info['variety']", None, 0)

# insert_question("Q80","Information technology (IT)","Python programming", "When would you use a while loop?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q80O1","Q80","When you want to minimize the use of strings in your code.", None, 0)
# insert_question_option("Q80O2","Q80","When you want to run code in one file while code in another file is also running.", None, 0)
# insert_question_option("Q80O3","Q80","When you want some code to continue running as long as some condition is true.", None, 1)
# insert_question_option("Q80O4","Q80","When you need to run two or more chunks of code at once within the same file.", None, 0)

# insert_question("Q81","Information technology (IT)","Python programming", "What is the correct syntax for defining an __init__() method that sets instance-specific attributes upon creation of a new class instance?", None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q81O1","Q81","""def __init__(self, attr1, attr2):
#     attr1 = attr1
#     attr2 = attr2""", None, 0)
# insert_question_option("Q81O2","Q81","""def __init__(attr1, attr2):
#     attr1 = attr1
#     attr2 = attr2""", None, 0)
# insert_question_option("Q81O3","Q81","""def __init__(self, attr1, attr2):
#     self.attr1 = attr1
#     self.attr2 = attr2""", None, 1)
# insert_question_option("Q81O4","Q81","""def __init__(attr1, attr2):
#     self.attr1 = attr1
#     self.attr2 = attr2""", None, 0)

# insert_question("Q82","Information technology (IT)","Python programming", """What would this recursive function print if it is called with no parameters?
# def count_recursive(n=1):
#     if n > 3:
#         return
#     print(n)

#     count_recursive(n + 1)""", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q82O1","Q82","""1
# 1
# 2
# 2
# 3
# 3""", None, 0)
# insert_question_option("Q82O2","Q82","""3
# 2
# 1""", None, 0)
# insert_question_option("Q82O3","Q82","""3
# 3
# 2
# 2
# 1
# 1""", None, 0)
# insert_question_option("Q82O4","Q82","""1
# 2
# 3""", None, 1)

# insert_question("Q83","Information technology (IT)","Python programming", "In Python, when using sets, you use _ to calculate the intersection between two sets and _ to calculate the union.", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q83O1","Q83","Intersect; union", None, 0)
# insert_question_option("Q83O2","Q83","|; &", None, 0)
# insert_question_option("Q83O3","Q83","&; |", None, 1)
# insert_question_option("Q83O4","Q83","&&; ||", None, 0)

# insert_question("Q84","Information technology (IT)","Python programming", """What will this code fragment return?
# import numpy as np
# np.ones([1,2,3,4,5])""", None, "Hard", "Multiple choice", 2, "haledonald")
# insert_question_option("Q84O1","Q84","It returns a 5x5 matrix; each row will have the values 1,2,3,4,5.", None, 0)
# insert_question_option("Q84O2","Q84","It returns an array with the values 1,2,3,4,5.", None, 0)
# insert_question_option("Q84O3","Q84","It returns five different square matrices filled with ones. The first is 1x1, the second 2x2, and so on to 5x5.", None, 0)
# insert_question_option("Q84O4","Q84","It returns a 5-dimensional array of size 1x2x3x4x5 filled with 1s.", None, 1)

# insert_question("Q85","Information technology (IT)","Python programming", "You encounter a FileNotFoundException while using just the filename in the open function. What might be the easiest solution?", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q85O1","Q85","Make sure the file is on the system PATH.", None, 0)
# insert_question_option("Q85O2","Q85","Create a symbolic link to allow better access to the file.", None, 0)
# insert_question_option("Q85O3","Q85","Copy the file to the same directory as where the script is running from.", None, 1)
# insert_question_option("Q85O4","Q85","Add the path to the file to the PYTHONPATH environment variable.", None, 0)

# insert_question("Q86","Information technology (IT)","Python programming", "what will this command return? \n{x for x in range(100) if x%3 == 0}", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q86O1","Q86","A set of all the multiples of 3 less than 100.", None, 1)
# insert_question_option("Q86O2","Q86","A set of all the numbers from 0 to 100 multiplied by 3.", None, 0)
# insert_question_option("Q86O3","Q86","A list of all the multiples of 3 less than 100.", None, 0)
# insert_question_option("Q86O4","Q86","A set of all the multiples of 3 less than 100 excluding 0.", None, 0)

# insert_question("Q87","Information technology (IT)","Python programming", "What does the // operator in Python 3 allow you to do?", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q87O1","Q87","Perform integer division.", None, 1)
# insert_question_option("Q87O2","Q87","Perform operations on exponents.", None, 0)
# insert_question_option("Q87O3","Q87","Find the remainder of a division operation.", None, 0)
# insert_question_option("Q87O4","Q87","Perform floating point division.", None, 0)

# insert_question("Q88","Information technology (IT)","Python programming", "What file is imported to use dates in Python?", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q88O1","Q88","datetime", None, 1)
# insert_question_option("Q88O2","Q88","dateday", None, 0)
# insert_question_option("Q88O3","Q88","daytime", None, 0)
# insert_question_option("Q88O4","Q88","timedate", None, 0)

# insert_question("Q89","Information technology (IT)","Python programming", """What is the output of this code? (NumPy has been imported as np.)?
# a = np.array([1,2,3,4])
# print(a[[False, True, False, False]])""", None, "Hard", "Multiple choice", 2, "haledonald")
# insert_question_option("Q89O1","Q89","{0,2}", None, 0)
# insert_question_option("Q89O2","Q89","[2]", None, 1)
# insert_question_option("Q89O3","Q89","{2}", None, 0)
# insert_question_option("Q89O4","Q89","[0,2,0,0]", None, 0)

# insert_question("Q90","Information technology (IT)","Python programming", """Suppose you have a string variable defined as y='stuff;thing;junk;'. What would be the output from this code?
# z = y.split(';')
# len(z)""", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q90O1","Q90","17", None, 0)
# insert_question_option("Q90O2","Q90","4", None, 1)
# insert_question_option("Q90O3","Q90","0", None, 0)
# insert_question_option("Q90O4","Q90","3", None, 0)

# insert_question("Q91","Information technology (IT)","Python programming", """What is the output of this code?
# num_list = [1,2,3,4,5]
# num_list.remove(2)
# print(num_list)""", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q91O1","Q91","[1,2,4,5]", None, 0)
# insert_question_option("Q91O2","Q91","[1,3,4,5]", None, 1)
# insert_question_option("Q91O3","Q91","[3,4,5]", None, 0)
# insert_question_option("Q91O4","Q91","[1,2,3]", None, 0)

# insert_question("Q92","Information technology (IT)","Python programming", """Which command will create a list from 10 down to 1? Example:
# [10,9,8,7,6,5,4,3,2,1]""", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q92O1","Q92","reversed(list(range(1,11)))", None, 0)
# insert_question_option("Q92O2","Q92","list(reversed(range(1,10)))", None, 0)
# insert_question_option("Q92O3","Q92","list(range(10,1,-1))", None, 0)
# insert_question_option("Q92O4","Q92","list(reversed(range(1,11)))", None, 1)

# insert_question("Q93","Information technology (IT)","Python programming", """Which fragment of code will print the same output as this fragment?
# import math
# print(math.pow(2,10)) # prints 2 elevated to the 10th power""", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q93O1","Q93","print(2^10)", None, 0)
# insert_question_option("Q93O2","Q93","print(2**10)", None, 1)
# insert_question_option("Q93O3","Q93","""y = [x*2 for x in range(1,10)]
# print(y)""", None, 0)
# insert_question_option("Q93O4","Q93","""y = 1
# for i in range(1,10):
#     y = y * 2
# print(y)""", None, 0)

# insert_question("Q94","Information technology (IT)","Python programming", "Elements surrounded by [] are _, {} are _, and () are _", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q94O1","Q94","sets only; lists or dictionaries; tuples", None, 0)
# insert_question_option("Q94O2","Q94","lists; sets only; tuples", None, 0)
# insert_question_option("Q94O3","Q94","tuples; sets or lists; dictionaries", None, 0)
# insert_question_option("Q94O4","Q94","lists; dictionaries or sets; tuples", None, 1)

# insert_question("Q95","Information technology (IT)","Python programming", """What is the output of this code? (NumPy has been imported as np.)
# table = np.array([
#     [1,3],
#     [2,4]])
# print(table.max(axis=1))""", None, "Hard", "Multiple choice", 2, "haledonald")
# insert_question_option("Q95O1","Q95","[2, 4]", None, 0)
# insert_question_option("Q95O2","Q95","[3, 4]", None, 1)
# insert_question_option("Q95O3","Q95","[4]", None, 0)
# insert_question_option("Q95O4","Q95","[1,2]", None, 0)

# insert_question("Q96","Information technology (IT)","Python programming", '''What will this code print?
# number = 3
# print (f"The number is {number}")''', None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q96O1","Q96","The number is 3", None, 1)
# insert_question_option("Q96O2","Q96","the number is 3", None, 0)
# insert_question_option("Q96O3","Q96","THE NUMBER IS 3", None, 0)
# insert_question_option("Q96O4","Q96","It throws a TypeError because the integer must be cast to a string.", None, 0)

# insert_question("Q97","Information technology (IT)","Python programming", "Which syntax correctly creates a variable that is bound to a tuple?", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q97O1","Q97","my_tuple tup(2, 'apple', 3.5) %D", None, 0)
# insert_question_option("Q97O2","Q97","my_tuple [2, 'apple', 3.5].tuple() %D", None, 0)
# insert_question_option("Q97O3","Q97","my_tuple = (2, 'apple', 3.5)", None, 1)
# insert_question_option("Q97O4","Q97","my_tuple = [2, 'apple', 3.5]", None, 0)

# insert_question("Q98","Information technology (IT)","Python programming", "Which mode is not a valid way to access a file from within a Python script?", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q98O1","Q98","write('w')", None, 0)
# insert_question_option("Q98O2","Q98","scan('s')", None, 1)
# insert_question_option("Q98O3","Q98","append('a')", None, 0)
# insert_question_option("Q98O4","Q98","read('r')", None, 0)

# insert_question("Q99","Information technology (IT)","Python programming", "NumPy allows you to multiply two arrays without a for loop. This is an example of _.", None, "Hard", "Multiple choice", 2, "haledonald")
# insert_question_option("Q99O1","Q99","Vectorization.", None, 1)
# insert_question_option("Q99O2","Q99","Attributions.", None, 0)
# insert_question_option("Q99O3","Q99","Acceleration.", None, 0)
# insert_question_option("Q99O4","Q99","Functional programming.", None, 0)

# insert_question("Q100","Information technology (IT)","Python programming", "What built-in Python data type can be used as a hash table?", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q100O1","Q100","set", None, 0)
# insert_question_option("Q100O2","Q100","list", None, 0)
# insert_question_option("Q100O3","Q100","tuple", None, 0)
# insert_question_option("Q100O4","Q100","dictionary", None, 1)

# insert_question("Q101","Information technology (IT)","Python programming", "Which Python function allows you to execute Linux shell commands in Python?", None, "Hard", "Multiple choice", 2, "haledonald")
# insert_question_option("Q101O1","Q101","sys.exc_info()", None, 0)
# insert_question_option("Q101O2","Q101","os.system()", None, 1)
# insert_question_option("Q101O3","Q101","os.getcwd()", None, 0)
# insert_question_option("Q101O4","Q101","sys.executable", None, 0)

# insert_question("Q102","Information technology (IT)","Python programming", """Suppose you have the following code snippet and want to extract a list with only the letters. Which fragment of code will _not_ achieve that goal?
# my_dictionary = {
#     'A': 1,
#     'B': 2,
#     'C': 3,
#     'D': 4,
#     'E': 5
# }""", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q102O1","Q102","""letters = []

# for letter in my_dictionary.values():
#     letters.append(letter)""", None, 1)
# insert_question_option("Q102O2","Q102","letters = my_dictionary.keys()", None, 0)
# insert_question_option("Q102O3","Q102","letters = [letter for (letter, number) in my_dictionary.items()]", None, 0)
# insert_question_option("Q102O4","Q102","letters = list(my_dictionary)", None, 0)

# insert_question("Q103","Information technology (IT)","Python programming", "When an array is large, NumPy will not print the entire array when given the built-in print function. What function can you use within NumPy to force it to print the entire array?", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q103O1","Q103","set_printparams", None, 0)
# insert_question_option("Q103O2","Q103","set_printoptions", None, 1)
# insert_question_option("Q103O3","Q103","set_fullprint", None, 0)
# insert_question_option("Q103O4","Q103","setp_printwhole", None, 0)

# insert_question("Q104","Information technology (IT)","Python programming", "When would you use a try/except block in code?", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q104O1","Q104","You use try/except blocks when you want to run some code, but need a way to execute different code if an exception is raised.", None, 1)
# insert_question_option("Q104O2","Q104","You use try/except blocks inside of unit tests so that the unit tests will always pass.", None, 0)
# insert_question_option("Q104O3","Q104","You use try/except blocks so that you can demonstrate to your code reviewers that you tried a new approach, but if the new approach is not what they were looking for, they can leave comments under the except keyword.", None, 0)
# insert_question_option("Q104O4","Q104","You use try/except blocks so that none of your functions or methods return None.", None, 0)

# insert_question("Q105","Information technology (IT)","Python programming", "In Python, how can the compiler identify the inner block of a for loop?", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q105O1","Q105","because of the level of indentation after the for loop", None, 1)
# insert_question_option("Q105O2","Q105","because of the end keyword at the end of the for loop", None, 0)
# insert_question_option("Q105O3","Q105","because the block is surrounded by brackets ({})", None, 0)
# insert_question_option("Q105O4","Q105","because of the blank space at the end of the body of the for loop", None, 0)

# insert_question("Q106","Information technology (IT)","Python programming", "What Python mechanism is best suited for telling a user they are using a deprecated function", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q106O1","Q106","sys.stdout", None, 0)
# insert_question_option("Q106O2","Q106","Traceback", None, 0)
# insert_question_option("Q106O3","Q106","Warnings", None, 1)
# insert_question_option("Q106O4","Q106","Exceptions", None, 0)

# insert_question("Q107","Information technology (IT)","Python programming", """What will be the value of x after running this code?
# x = {1,2,3,4,5}
# x.add(5)
# x.add(6)""", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q107O1","Q107","{1, 2, 3, 4, 5, 5, 6}", None, 0)
# insert_question_option("Q107O2","Q107","{5, 6, 1, 2, 3, 4, 5, 6}", None, 0)
# insert_question_option("Q107O3","Q107","{6, 1, 2, 3, 4, 5}", None, 0)
# insert_question_option("Q107O4","Q107","{1, 2, 3, 4, 5, 6}", None, 1)

# insert_question("Q108","Information technology (IT)","Python programming", """How would you access and store all of the keys in this dictionary at once?
# fruit_info = {
#     'fruit': 'apple',
#     'count': 2,
#     'price': 3.5
# }""", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q108O1","Q108","my_keys = fruit_info.to_keys()", None, 0)
# insert_question_option("Q108O2","Q108","my_keys = fruit_info.all_keys()", None, 0)
# insert_question_option("Q108O3","Q108","my_keys = fruit_info.keys", None, 0)
# insert_question_option("Q108O4","Q108","my_keys = fruit_info.keys()", None, 1)

# insert_question("Q109","Information technology (IT)","Python programming", '''What is wrong with this function definition?
# def be_friendly(greet = "How are you!", name):
#     pass''', None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q109O1","Q109","name is a reserved word.", None, 0)
# insert_question_option("Q109O2","Q109","Underscores are not allowed in function names.", None, 0)
# insert_question_option("Q109O3","Q109","A non-default argument follows a default argument.", None, 1)
# insert_question_option("Q109O4","Q109","There is nothing wrong with this function definition.", None, 0)

# insert_question("Q110","Information technology (IT)","Python programming", "Given that NumPy is imported as np, which choice will return True?", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q110O1","Q110","""a = np.zeros([3,4])
# b = a.copy()
# np.array_equal(a,b)""", None, 1)
# insert_question_option("Q110O2","Q110","""a = np.empty([3,4])
# b = np.empty([3,4])
# np.array_equal(a,b)""", None, 0)
# insert_question_option("Q110O3","Q110","""a = np.zeros([3,4])
# b = np.zeros([4,3])
# np.array_equal(a,b)""", None, 0)
# insert_question_option("Q110O4","Q110","""a = np.array([1, np.nan])
# np.array_equal(a,a)""", None, 0)

# insert_question("Q111","Information technology (IT)","Python programming", """In this code fragment, what will the values of c and d be equivalent to?
# import numpy as np
# a = np.array([1,2,3])
# b = np.array([4,5,6])
# c = a*b
# d = np.dot(a,b)""", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q111O1","Q111","""c = [ a[1] * b[1], a[2] * b[2], a[3] * b[3] ]
# d = sum(c)""", None, 0)
# insert_question_option("Q111O2","Q111","""c = a[0] * b[0], a[1] * b[1], a[2] * b[2]

# d = [ a[0] * b[0], a[1] * b[1], a[2] * b[2] ]""", None, 0)
# insert_question_option("Q111O3","Q111","""c = [ a[0] * b[0], a[1] * b[1], a[2] * b[2] ]

# d = sum(a) + sum(b)""", None, 0)
# insert_question_option("Q111O4","Q111","""c = [ a[0] * b[0], a[1] * b[1], a[2] * b[2] ]

# d = sum(c)""", None, 1)

# insert_question("Q112","Information technology (IT)","Python programming", "What two functions within the NumPy library could you use to solve a system of linear equations?", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q112O1","Q112","linalg.eig() and .matmul()", None, 1)
# insert_question_option("Q112O2","Q112","linalg.inv() and .dot()", None, 0)
# insert_question_option("Q112O3","Q112","linalg.det() and .dot()", None, 0)
# insert_question_option("Q112O4","Q112","linalg.inv() and .eye()", None, 0)

# insert_question("Q113","Information technology (IT)","Python programming", "What is the correct syntax for creating a variable that is bound to a list?", None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q113O1","Q113","my_list = (2, 'apple', 3.5)", None, 0)
# insert_question_option("Q113O2","Q113","my_list = [2, 'apple', 3.5]", None, 1)
# insert_question_option("Q113O3","Q113","my_list = [2, 'apple', 3.5].to_list()", None, 0)
# insert_question_option("Q113O4","Q113","my_list = to_list(2, 'apple', 3.5)", None, 0)

# insert_question("Q114","Information technology (IT)","Python programming", """This code provides the _ of the list of numbers.
# num_list = [21, 13, 19, 3, 11, 5, 18]
# num_list.sort()
# num_list[len(num_list) // 2]""", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q114O1","Q114","mode", None, 0)
# insert_question_option("Q114O2","Q114","average", None, 0)
# insert_question_option("Q114O3","Q114","mean", None, 0)
# insert_question_option("Q114O4","Q114","median", None, 1)

# insert_question("Q115","Information technology (IT)","Python programming", "What are the two main data structures in the Pandas library?", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q115O1","Q115","Arrays and DataFrames", None, 0)
# insert_question_option("Q115O2","Q115","Series and Matrixes", None, 0)
# insert_question_option("Q115O3","Q115","Matrixes and DataFrames", None, 0)
# insert_question_option("Q115O4","Q115","Series and DataFrames", None, 1)

# insert_question("Q116","Information technology (IT)","Python programming", """Suppose you have a variable named vector of type np.array with 10,000 elements. How can you turn vector into a variable named matrix with dimensions 100x100?""", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q116O1","Q116","matrix = (vector.shape = (100,100))", None, 0)
# insert_question_option("Q116O2","Q116","matrix = vector.to_matrix(100,100)", None, 0)
# insert_question_option("Q116O3","Q116","matrix = matrix(vector,100,100)", None, 0)
# insert_question_option("Q116O4","Q116","matrix = vector.reshape(100, 100)", None, 1)

# insert_question("Q117","Information technology (IT)","Python programming", "Which choice is an immutable data type?", None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q117O1","Q117","Dictionary", None, 0)
# insert_question_option("Q117O2","Q117","List", None, 0)
# insert_question_option("Q117O3","Q117","Set", None, 0)
# insert_question_option("Q117O4","Q117","String", None, 1)

# insert_question("Q118","Information technology (IT)","Python programming", '''What is the output of this code?
# def myFunction(country = "France"):
#     print("Hello, I am from", country)

# myFunction("Spain")
# myFunction("")
# myFunction()''', None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q118O1","Q118","""Hello, I am from Spain
# Hello, I am from
# Hello, I am from""", None, 0)
# insert_question_option("Q118O2","Q118","""Hello, I am from France
# Hello, I am from France
# Hello, I am from France""", None, 0)
# insert_question_option("Q118O3","Q118","""Hello, I am from Spain
# Hello, I am from
# Hello, I am from France""", None, 1)
# insert_question_option("Q118O4","Q118","""Hello, I am from Spain
# Hello, I am from France
# Hello, I am from France""", None, 0)

# insert_question("Q119","Information technology (IT)","Python programming", "Choose the option below for which instance of the class cannot be created.", None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q119O1","Q119","Anonymous Class", None, 0)
# insert_question_option("Q119O2","Q119","Parent Class", None, 0)
# insert_question_option("Q119O3","Q119","Nested Class", None, 0)
# insert_question_option("Q119O4","Q119","Abstract Class", None, 1)

# insert_question("Q120","Information technology (IT)","Python programming", "Using Pandas, we load a data set from Kaggle, as structured in the image below. Which command will return the total number of survivors?", "..\images\Q120.png", "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q120O1","Q120","sum(titanic['Survived'])", None, 1)
# insert_question_option("Q120O2","Q120","[x for x in titanic['Survived'] if x == 1]", None, 0)
# insert_question_option("Q120O3","Q120",'len(titanic["Survived"])', None, 0)
# insert_question_option("Q120O4","Q120","sum(titanic['Survived']==0)", None, 0)

# insert_question("Q121","Information technology (IT)","Python programming", '''How would you create a list of tuples matching these lists of characters and actors?
# characters = ["Iron Man", "Spider Man", "Captain America"]
# actors = ["Downey", "Holland", "Evans"]

# # example output : [("IronMan", "Downey"), ("Spider Man", "Holland"), ("Captain America", "Evans")]''', None, "Hard", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q121O1","Q121","[(x,y)] for x in characters for y in actors]", None, 0)
# insert_question_option("Q121O2","Q121","zip(characters, actors)", None, 1)
# insert_question_option("Q121O3","Q121","""d = {}

# for x in range(1, len(characters)):
#     d[x] = actors[x]""", None, 0)
# insert_question_option("Q121O4","Q121","{x:y for x in characters for y in actors}", None, 0)

# insert_question("Q122","Information technology (IT)","Python programming", "What will this statement return? \n{x : x*x for x in range(1,100)}", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q122O1","Q122","A dictionary with x as a key, and x squared as its value; from 1 to 100.", None, 0)
# insert_question_option("Q122O2","Q122","A dictionary with x as a key, and x squared as its value; from 1 to 99.", None, 1)
# insert_question_option("Q122O3","Q122","A set of tuples, consisting of (x, x squared); from 1 to 99.", None, 0)
# insert_question_option("Q122O4","Q122","A list with all numbers squared from 1 to 99.", None, 0)

# insert_question("Q123","Information technology (IT)","Python programming", "Jaccard Similarity is a formula that tells you how similar two sets are. It is defined as the cardinality of the intersection divided by the cardinality of the union. Which choice is an accurate implementation in Python?", "..\images\Q123.png", "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q123O1","Q123","def jaccard(a, b): return len (a | b) / len (a & b)", None, 0)
# insert_question_option("Q123O2","Q123","def jaccard(a, b): return len (a & b) / len (a | b)", None, 1)
# insert_question_option("Q123O3","Q123","def jaccard(a, b): return len (a && b) / len (a || b)", None, 0)
# insert_question_option("Q123O4","Q123","def jaccard(a, b): return a.intersection(b) / a.union(b)", None, 0)

# insert_question("Q124","Information technology (IT)","Python programming", "Which choice is not a native numerical type in Python?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q124O1","Q124","Long", None, 0)
# insert_question_option("Q124O2","Q124","Int", None, 0)
# insert_question_option("Q124O3","Q124","Float", None, 0)
# insert_question_option("Q124O4","Q124","Double", None, 1)

# insert_question("Q125","Information technology (IT)","Python programming", "What will be the output of this code? \n[1,2,3] * 3", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q125O1","Q125","[3,2,3]", None, 0)
# insert_question_option("Q125O2","Q125","[1, 2, 3, 1, 2, 3, 1, 2, 3]", None, 1)
# insert_question_option("Q125O3","Q125","You will get a type error.", None, 0)
# insert_question_option("Q125O4","Q125","[3,6,9]", None, 0)

# insert_question("Q126","Information technology (IT)","Python programming", "Given a list defined as numbers = [1,2,3,4], what is the value of numbers[-2]?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q126O1","Q126","1", None, 0)
# insert_question_option("Q126O2","Q126","3", None, 1)
# insert_question_option("Q126O3","Q126","2", None, 0)
# insert_question_option("Q126O4","Q126","An IndexError exception is thrown.", None, 0)

# insert_question("Q127","Information technology (IT)","Python programming", "Which statement about strings in Python is true?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q127O1","Q127","Strings can be enclosed by double quotes (\") or single quotes (').", None, 1)
# insert_question_option("Q127O2","Q127","Strings can only be enclosed in single quotes (').", None, 0)
# insert_question_option("Q127O3","Q127","Single character strings must be enclosed in single quotes ('), and the rest must be enclosed in double quotes (\").", None, 0)
# insert_question_option("Q127O4","Q127","Strings can only be enclosed in double quotes (\").", None, 0)

# insert_question("Q128","Information technology (IT)","Python programming", "What is the correct syntax for defining an _init_() method that takes no parameters?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q128O1","Q128","def*init*(self): pass", None, 0)
# insert_question_option("Q128O2","Q128","class*init*(self): pass", None, 0)
# insert_question_option("Q128O3","Q128","class*init*(): pass", None, 0)
# insert_question_option("Q128O4","Q128","def*init*(): pass", None, 1)

# insert_question("Q129","Information technology (IT)","Python programming", "Suppose you need to use the sin function from the math library. What is the correct syntax for importing only that function?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q129O1","Q129","using math.sin", None, 0)
# insert_question_option("Q129O2","Q129","import math.sin", None, 0)
# insert_question_option("Q129O3","Q129","from math import sin", None, 1)
# insert_question_option("Q129O4","Q129","import sin from math", None, 0)

# insert_question("Q130","Information technology (IT)","Python programming", "What do you get if you apply numpy.sum() to a list that contains only Boolean values?", None, "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q130O1","Q130","0", None, 0)
# insert_question_option("Q130O2","Q130","the count of all True values", None, 1)
# insert_question_option("Q130O3","Q130","a type error", None, 0)
# insert_question_option("Q130O4","Q130","None", None, 0)

# insert_question("Q131","Information technology (IT)","Python programming", '''What will this code print?
# print ("foo" if (256).bit_length() > 8 else "bar")''', None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q131O1","Q131","True", None, 0)
# insert_question_option("Q131O2","Q131","foo", None, 1)
# insert_question_option("Q131O3","Q131","You will get an error message because constant integer values are not classes.", None, 0)
# insert_question_option("Q131O4","Q131","bar", None, 0)

# insert_question("Q132","Information technology (IT)","Python programming", "It is often the case that the pandas library is used for _ data and NumPy for _ data.", None, "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q132O1","Q132","string; numerical", None, 0)
# insert_question_option("Q132O2","Q132","unstructured; structured", None, 0)
# insert_question_option("Q132O3","Q132","numerical; tabular", None, 0)
# insert_question_option("Q132O4","Q132","tabular; numerical", None, 1)

# insert_question("Q133","Information technology (IT)","Python programming", "What do you need to do to install additional packages into Python?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q133O1","Q133","Use a C compiler like gcc or clang.", None, 0)
# insert_question_option("Q133O2","Q133","Use a package manager like pip or conda.", None, 1)
# insert_question_option("Q133O3","Q133","Use an IDE like Notepad++ or Idle.", None, 0)
# insert_question_option("Q133O4","Q133","Use a package manager like NPM or NuGet.", None, 0)

# insert_question("Q134","Information technology (IT)","Python programming", "The image below was created using Matplotlib. It is a distribution plot of a list of integers filled with numbers using the function _ and plotted with _.", "..\images\Q134.png", "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q134O1","Q134","random.uniform(0,50);plt.hist", None, 0)
# insert_question_option("Q134O2","Q134","random.gauss(50,20);plt.hist", None, 1)
# insert_question_option("Q134O3","Q134","random();plt.scatter", None, 0)
# insert_question_option("Q134O4","Q134","random.triangular(0,50);plt.bar", None, 0)

# insert_question("Q135","Information technology (IT)","Python programming", """In this code fragment, what will be the values of a and b?
# import numpy as np

# a = np.arange(100)
# b = a[50:60:2]""", None, "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q135O1","Q135","a: all integers from 0 to 99 (inclusive); b: all even integers from 50 to 58 (inclusive).", None, 1)
# insert_question_option("Q135O2","Q135","a: all integers from 0 to 100 (inclusive); b: all even integers from 50 to 60 (inclusive).", None, 0)
# insert_question_option("Q135O3","Q135","a: all integers from 0 to 99 (inclusive); b: all even integers from 50 to 60 (inclusive).", None, 0)
# insert_question_option("Q135O4","Q135","a: all integers from 0 to 99 (inclusive); b: all odd integers from 49 to 59 (inclusive).", None, 0)

# insert_question("Q136","Information technology (IT)","Python programming", "When using NumPy in Python, how do you check the dimensionality (number and length of dimensions) of an object called my_object?", None, "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q136O1","Q136","my_object.get_shape()", None, 0)
# insert_question_option("Q136O2","Q136","my_object.shape", None, 1)
# insert_question_option("Q136O3","Q136","my_object.dim()", None, 0)
# insert_question_option("Q136O4","Q136","len(my_object)", None, 0)

# insert_question("Q137","Information technology (IT)","Python programming", "Assume you have a non-empty list named mylist and you want to search for a specific value. The minimum number of comparisons will be __ and the maximum number of comparisons will be _?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q137O1","Q137","len(mylist); len(mylist)", None, 0)
# insert_question_option("Q137O2","Q137","1; len(mylist)", None, 1)
# insert_question_option("Q137O3","Q137","2; len(mylist)", None, 0)
# insert_question_option("Q137O4","Q137","0; len(mylist)", None, 0)

# insert_question("Q138","Information technology (IT)","Python programming", """Suppose you want to double-check if two matrices can be multiplied using NumPy for debugging purposes. How would you complete this code fragment by filling in the blanks with the appropriate variables?
# import numpy as np

# def can_matrices_be_multiplied (matrix1, matrix2):
#     rowsMat1, columnsMat1 = matrix1.shape
#     rowsMat2, columnsMat2 = matrix2.shape

#     if _____ == ______ :
#         print('The matrices can be multiplied!')
#         return True
#     else:
#         return False""", None, "Hard", "Multiple choice", 2, "jknight")
# insert_question_option("Q138O1","Q138","columnsMat1; rowsMat1;", None, 0)
# insert_question_option("Q138O2","Q138","columnsMat1; rowsMat2;", None, 1)
# insert_question_option("Q138O3","Q138","columnsMat1; columnsMat2;", None, 0)
# insert_question_option("Q138O4","Q138","columnsMat2; rowsMat1;", None, 0)

# insert_question("Q139","Information technology (IT)","Python programming", """What is the output of this comprehension?
# [(x, x+1) for x in range(1,5)]""", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q139O1","Q139","[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]", None, 0)
# insert_question_option("Q139O2","Q139","[1,2,3,4,5]", None, 0)
# insert_question_option("Q139O3","Q139","[(1, 2), (2, 3), (3, 4)]", None, 0)
# insert_question_option("Q139O4","Q139","[(1, 2), (2, 3), (3, 4), (4, 5)]", None, 1)

# insert_question("Q140","Information technology (IT)","Python programming", "In Python, a class method must have __ as a function decorator, and the first parameter of the method will be a reference to __.", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q140O1","Q140","@classmethod; the class", None, 1)
# insert_question_option("Q140O2","Q140","inline; the class", None, 0)
# insert_question_option("Q140O3","Q140","static; self", None, 0)
# insert_question_option("Q140O4","Q140","@static; self", None, 0)

# insert_question("Q141","Information technology (IT)","Python programming", "Which snippet of code will print My name is Joffrey, son of Robert?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q141O1","Q141",'''class Father():
#     name = 'Robert'

# class Person(Father):
#     def __init__(self, name):
#         self.fathername = super.name
#         self.name = name

#     def introduce(self):
#         print("My name is", self.name, "son of", self.fathername)

# king = Person("Joffrey")
# king.introduce()''', None, 0)
# insert_question_option("Q141O2","Q141",'''class Father():
#     name = 'Robert'


# class Person(Father):
#     def __init__(self, name):
#         self.fathername = self.name
#         self.name = name

#     def introduce(self):
#         print("My name is", self.name, "son of", self.fathername)


# king = Person("Joffrey")
# king.introduce()''', None, 1)
# insert_question_option("Q141O3","Q141",'''class Father():
#     name = 'Robert'


# class Person(Father):
#     def __init__(self, name):
#         self.name = name

#     def introduce(self):
#         print("My name is", self.name, "son of", super.name)

# king = Person("Joffrey")
# king.introduce()''', None, 0)
# insert_question_option("Q141O4","Q141",'''class Father():
#     name = 'Robert'

# class Person(Father):
#     def __init__(self, name):
#         self.name = name

#     def introduce(self):
#         print("My name is", self.name, "son of", base.name)

# king = Person("Joffrey")
# king.introduce()''', None, 0)

# insert_question("Q142","Information technology (IT)","Python programming", """What does this code output in the console, assuming defaultdict has already been imported?
# animals = {
#     'a': ['ant', 'antelope', 'armadillo'],
#     'b': ['beetle', 'bear', 'bat'],
#     'c': ['cat', 'cougar', 'camel']
# }

# animals = defaultdict(list, animals)

# print(animals['b'])
# print(animals['d'])""", None, "Hard", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q142O1","Q142","""['beetle', 'bear', 'bat']
#       []""", None, 1)
# insert_question_option("Q142O2","Q142","""['beetle', 'bear', 'bat']
#       # an exception will be thrown""", None, 0)
# insert_question_option("Q142O3","Q142","""['beetle', 'bear', 'bat']
#       None""", None, 0)
# insert_question_option("Q142O4","Q142","""['bat', 'bear', 'beetle']
#       []""", None, 0)

# insert_question("Q143","Information technology (IT)","Python programming", "What will this line of code return? (Assume n is already defined as any positive integer value.) \n[x*2 for x in range(1,n)]", None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q143O1","Q143","A list with all the even numbers less than 2*n.", None, 1)
# insert_question_option("Q143O2","Q143","A dictionary with all the even numbers less than 2*n.", None, 0)
# insert_question_option("Q143O3","Q143","A list with all the odd numbers less than 2*n.", None, 0)
# insert_question_option("Q143O4","Q143","A list with all the even numbers less than or equal to 2*n.", None, 0)

# insert_question("Q144","Information technology (IT)","Python programming", """What does this code print in the console?
# x = 18

# if x > 10:
# 	if x > 15:
# 		print('A')
# 	else:
# 		print('B')
# else:
# 	print('C')""", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q144O1","Q144","C", None, 0)
# insert_question_option("Q144O2","Q144","A B", None, 0)
# insert_question_option("Q144O3","Q144","B", None, 0)
# insert_question_option("Q144O4","Q144","A", None, 1)

# insert_question("Q145","Information technology (IT)","Python programming", "What is the maximum length of a Python identifier?", None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q145O1","Q145","32", None, 0)
# insert_question_option("Q145O2","Q145","16", None, 0)
# insert_question_option("Q145O3","Q145","128", None, 0)
# insert_question_option("Q145O4","Q145","No fixed length is specified.", None, 1)

# insert_question("Q146","Information technology (IT)","Python programming", """What will the value of the i variable be when the following loop finishes its execution?
# for i in range(5): pass""", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q146O1","Q146","5", None, 0)
# insert_question_option("Q146O2","Q146","The variable becomes unavailable.", None, 0)
# insert_question_option("Q146O3","Q146","6", None, 0)
# insert_question_option("Q146O4","Q146","4", None, 1)

# insert_question("Q147","Information technology (IT)","Python programming", "f-strings are also called:", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q147O1","Q147","Formatted string expressions.", None, 0)
# insert_question_option("Q147O2","Q147","Functional strings.", None, 0)
# insert_question_option("Q147O3","Q147","Modulo formatted strings.", None, 0)
# insert_question_option("Q147O4","Q147","Formatted string literals.", None, 1)

# insert_question("Q148","Information technology (IT)","Python programming", "How many CPUs (or cores) will the Python threading library take advantage of simultaneously?", None, "Hard", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q148O1","Q148","One.", None, 1)
# insert_question_option("Q148O2","Q148","All of the available CPUs.", None, 0)
# insert_question_option("Q148O3","Q148","Two.", None, 0)
# insert_question_option("Q148O4","Q148","Three.", None, 0)

# insert_question("Q149","Information technology (IT)","Python programming", """What will be the value of y in this code?
# x = 5
# y = 1 + (20 if x < 5 else 30)""", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q149O1","Q149","False", None, 0)
# insert_question_option("Q149O2","Q149","21", None, 0)
# insert_question_option("Q149O3","Q149","2", None, 0)
# insert_question_option("Q149O4","Q149","31", None, 1)

# insert_question("Q150","Information technology (IT)","Python programming", "The process of pickling in Python includes?", None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q150O1","Q150","Conversion of a Python object hierarchy into byte stream.", None, 1)
# insert_question_option("Q150O2","Q150","Conversion of a data table into a list.", None, 0)
# insert_question_option("Q150O3","Q150","Conversion of a byte stream into Python object hierarchy.", None, 0)
# insert_question_option("Q150O4","Q150","Conversion of a list into a data table.", None, 0)

# insert_question("Q151","Information technology (IT)","Python programming", '''What is the output of the following program?
# print("codescracker".endswith("er"))''', None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q151O1","Q151","True", None, 1)
# insert_question_option("Q151O2","Q151","1", None, 0)
# insert_question_option("Q151O3","Q151","2", None, 0)
# insert_question_option("Q151O4","Q151","False", None, 0)

# insert_question("Q152","Information technology (IT)","Python programming", '''What is the output of the following program?
# print("programming".center())''', None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q152O1","Q152","cr", None, 0)
# insert_question_option("Q152O2","Q152","programming", None, 0)
# insert_question_option("Q152O3","Q152","Error says TypeError: center expected at least 1 argument, got 0.", None, 1)
# insert_question_option("Q152O4","Q152","None of the above.", None, 0)

# insert_question("Q153","Information technology (IT)","Python programming", "Who created the Python programming language?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q153O1","Q153","Tim Berners-Lee", None, 0)
# insert_question_option("Q153O2","Q153","Ada Lovelace", None, 0)
# insert_question_option("Q153O3","Q153","Guido van Rossum", None, 1)
# insert_question_option("Q153O4","Q153","Alan Turing", None, 0)

# insert_question("Q154","Information technology (IT)","Python programming", "Which collection is ordered, changeable, and allows duplicate members?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q154O1","Q154","Set", None, 0)
# insert_question_option("Q154O2","Q154","Tuple", None, 0)
# insert_question_option("Q154O3","Q154","Dictionary", None, 0)
# insert_question_option("Q154O4","Q154","List", None, 1)

# insert_question("Q155","Information technology (IT)","Python programming", """What will be printed in the console if you run this code?
# x = 1j
# print(x**2 == -1)""", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q155O1","Q155","A runtime error telling you that the variable j has not been initialized.", None, 0)
# insert_question_option("Q155O2","Q155","True", None, 1)
# insert_question_option("Q155O3","Q155","1j", None, 0)
# insert_question_option("Q155O4","Q155","False", None, 0)

# insert_question("Q156","Information technology (IT)","Python programming", """What will be printed in the console if you run this code?
# print(0xA + 0xB + 0xC)""", None, "Hard", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q156O1","Q156","33", None, 1)
# insert_question_option("Q156O2","Q156","63", None, 0)
# insert_question_option("Q156O3","Q156","0xA + 0xB + 0xC", None, 0)
# insert_question_option("Q156O4","Q156","None", None, 0)

# insert_question("Q157","Information technology (IT)","Python programming", '''What will this code output to the screen?
# for i in range(5):
#     print(i)
# else:
#     print("Done!")''', None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q157O1","Q157","1 2 3 4 5 Done!", None, 0)
# insert_question_option("Q157O2","Q157","0 1 2 3 4 5 Done!", None, 0)
# insert_question_option("Q157O3","Q157","0 1 2 3 4 Done!", None, 1)
# insert_question_option("Q157O4","Q157","You will get a syntax error.", None, 0)

# insert_question("Q158","Information technology (IT)","Python programming", "Which comparison of lists and tuples in Python is correct?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q158O1","Q158","Use lists instead of tuples when you have a collection of related but dissimilar objects.", None, 0)
# insert_question_option("Q158O2","Q158","Use tuples instead of lists when you have a common collection of similar objects.", None, 0)
# insert_question_option("Q158O3","Q158","Use tuples instead of lists for functions that need to return multiple values.", None, 1)
# insert_question_option("Q158O4","Q158","Use lists instead of tuples when the position of elements is important.", None, 0)

# insert_question("Q159","Information technology (IT)","Python programming", '''Consider the following code snippet that uses decorators to calculate the execution time of the execution_fn function:
# import functools
# import time

# def timer(MISSING_ARG_1):
#     @functools.wraps(func)
#     def wrapper(*args, **kwargs):
#         start_time = time.perf_counter()
#         rval = func(*args, **kwargs)
#         end_time = time.perf_counter()
#         duration = end_time - start_time
#         print(f"Executed in {duration:.4f} seconds")
#         return MISSING_ARG_2
#     return MISSING_ARG_3

# @timer
# def execution_fn():
#     for i in range(3):
#         time.sleep(1)

# execution_fn()
# Which of the following choices are the missing arguments?''', None, "Hard", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q159O1","Q159","""MISSING_ARG_1 = wrapper

# MISSING_ARG_2 = rval

# MISSING_ARG_3 = func""", None, 0)
# insert_question_option("Q159O2","Q159","""MISSING_ARG_1 = func

# MISSING_ARG_2 = rval

# MISSING_ARG_3 = wrapper""", None, 1)
# insert_question_option("Q159O3","Q159","""MISSING_ARG_1 is empty

# MISSING_ARG_2 = rval

# MISSING_ARG_3 = wrapper""", None, 0)
# insert_question_option("Q159O4","Q159","""MISSING_ARG_1 is empty

# MISSING_ARG_2 = rval

# MISSING_ARG_3 = func""", None, 0)

# insert_question("Q160","Information technology (IT)","Python programming", "Which of the following statements defines a new object type named Dog in Python?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q160O1","Q160","class Dog:", None, 1)
# insert_question_option("Q160O2","Q160","Dog class:", None, 0)
# insert_question_option("Q160O3","Q160","Dog:", None, 0)
# insert_question_option("Q160O4","Q160","class Dog", None, 0)

# insert_question("Q161","Information technology (IT)","Python programming", "To use pipelines in scikit-learn, import from the scikit-learn._ submodule.", None, "Hard", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q161O1","Q161","preprocessing", None, 0)
# insert_question_option("Q161O2","Q161","pipeline", None, 1)
# insert_question_option("Q161O3","Q161","filters", None, 0)
# insert_question_option("Q161O4","Q161","pipe_filter", None, 0)

# insert_question("Q162","Information technology (IT)","Python programming", "Data points in Pyplot are called", None, "Hard", "Multiple choice", 2, "navarromark")
# insert_question_option("Q162O1","Q162","pointers", None, 0)
# insert_question_option("Q162O2","Q162","points", None, 0)
# insert_question_option("Q162O3","Q162","markers", None, 1)
# insert_question_option("Q162O4","Q162","none of these", None, 0)

# insert_question("Q163","Information technology (IT)","Python programming", """What does this code print?
# a = np.array([[1, 2], [3, 4], [5, 6]])
# c = a[(a > 3) & (a < 11)]
# print(c)""", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q163O1","Q163","[[3, 4], [5, 6]]", None, 0)
# insert_question_option("Q163O2","Q163","[False, False, False, True, True, True]", None, 0)
# insert_question_option("Q163O3","Q163","[[0,0], [3, 4], [5, 6]]", None, 0)
# insert_question_option("Q163O4","Q163","[4 5 6]", None, 1)

# insert_question("Q164","Information technology (IT)","Python programming", """Assume m, n, and p are positive integers. In the following comprehension, how many times will the function randint be called?
# [ [ [ randint(1,100) for i in range(m) ] for j in range(n) ] for k in range(p) ]""", None, "Hard", "Multiple choice", 2, "navarromark")
# insert_question_option("Q164O1","Q164","m * n * p", None, 1)
# insert_question_option("Q164O2","Q164","The greater value of (m,n,p)", None, 0)
# insert_question_option("Q164O3","Q164","1 million", None, 0)
# insert_question_option("Q164O4","Q164","m + n + p", None, 0)

# insert_question("Q165","Information technology (IT)","Python programming", "Suppose you have a class named MyClass which has multiple inheritance and methods with the same name in its ancestors. Which class method could you call to see which method will get priority when invoked?", None, "Hard", "Multiple choice", 2, "navarromark")
# insert_question_option("Q165O1","Q165","MyClass.__mro__", None, 1)
# insert_question_option("Q165O2","Q165","MyClass.hierarchy()", None, 0)
# insert_question_option("Q165O3","Q165","callable(MyClass)", None, 0)
# insert_question_option("Q165O4","Q165","dir(MyClass)", None, 0)

# insert_question("Q166","Information technology (IT)","Python programming", """Suppose you have a list of employees described by the code below. You want to assign Alice the same salary as Charlie. Which choice will accomplish that?
# employees = {
#     'alice':{
#         'position':'Lead Developer',
#         'salary':1000
#     },
#     'bob':{
#         'position': 'Lead Artist',
#         'salary':2000
#     },
#     'charlie':{
#         'position':'cfo',
#         'salary':3000
#     }
# }""", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q166O1","Q166","employess['alice']['salary'] = employees['charlie']['salary']", None, 1)
# insert_question_option("Q166O2","Q166","employees.alice.salary = employees.charlie.salary", None, 0)
# insert_question_option("Q166O3","Q166","employees['alice'][1] = employees['charlie'][1]", None, 0)
# insert_question_option("Q166O4","Q166","employees['alice'].salary = employees['charlie'].salary", None, 0)

# insert_question("Q167","Information technology (IT)","Python programming", """You are given this piece of code. Assume m and n are already defined as some positive integer value. When it completes, how many tuples will my list contain?
# mylist = []

# for i in range(m):
#     for j in range(n):
#         mylist.append((i,j))""", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q167O1","Q167","m", None, 0)
# insert_question_option("Q167O2","Q167","m + n", None, 0)
# insert_question_option("Q167O3","Q167","n", None, 0)
# insert_question_option("Q167O4","Q167","m * n", None, 1)

# insert_question("Q168","Information technology (IT)","Python programming", """What will this comprehension provide you?
# {x : [y for y in range (1, x) if x % y == 0] for x in range (2, 100)}""", None, "Hard", "Multiple choice", 2, "navarromark")
# insert_question_option("Q168O1","Q168","A dictionary whose keys are the numbers from 2 to 99 (inclusive), and their respective values are their factors.", None, 1)
# insert_question_option("Q168O2","Q168","A dictionary whose keys are the numbers from 2 to 99 (inclusive), and their respective values are a list from 1 to the key value itself (inclusive).", None, 0)
# insert_question_option("Q168O3","Q168","A dictionary whose keys are the numbers from 2 to 99 (inclusive), and their respective values are the even numbers from 1 to the key value itself (inclusive).", None, 0)
# insert_question_option("Q168O4","Q168","A dictionary whose keys are the numbers from 2 to 99 (inclusive), and their respective values are the odd numbers from 1 to the key value itself (inclusive).", None, 0)

# insert_question("Q169","Information technology (IT)","Python programming", "What is the output of 17 % 15 ?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q169O1","Q169","17", None, 0)
# insert_question_option("Q169O2","Q169","15", None, 0)
# insert_question_option("Q169O3","Q169","2", None, 1)
# insert_question_option("Q169O4","Q169","16", None, 0)

# insert_question("Q170","Information technology (IT)","Python programming", '''How would you create a list of tuples matching these lists of characters and actors?
# characters = ["Iron Man", "Spider Man", "Captain America"]
# actors = ["Downey", "Holland", "Evans"]

# #example output : [("Iron Man", "Downey), ("Spider Man", "Holland"), ("Captain America", "Evans")]''', None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q170O1","Q170","zip (characters, actors)", None, 1)
# insert_question_option("Q170O2","Q170","{x:y for x in characters for y in actors}", None, 0)
# insert_question_option("Q170O3","Q170","[(x,y) for x in characters for y in actors]", None, 0)
# insert_question_option("Q170O4","Q170","""d = {}
# for x in range(1, len(characters)):
#     d[x] = actors [x]""", None, 0)

# insert_question("Q171","Information technology (IT)","Python programming", 'When is the if __name__ == "__main__": block executed in a Python script?', None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q171O1","Q171","Always, as it is required in every Python script.", None, 0)
# insert_question_option("Q171O2","Q171","Only when the script is executed directly from the command line or as the main program.", None, 1)
# insert_question_option("Q171O3","Q171","Only when the script contains syntax errors.", None, 0)
# insert_question_option("Q171O4","Q171","Only when the script is imported as a module in another script.", None, 0)

# insert_question("Q172","Information technology (IT)","Python programming", """What will be the output of the following Python code?
# def square(x):
# 	return x * x

# numbers = [1, 2, 3, 4, 5]
# squared_numbers = map(square, numbers)
# result = list(squared_numbers)
# print(result)""", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q172O1","Q172","[1, 4, 9, 16, 25]", None, 1)
# insert_question_option("Q172O2","Q172","[1, 2, 3, 4, 5]", None, 0)
# insert_question_option("Q172O3","Q172","[1, 8, 27, 64, 125]", None, 0)
# insert_question_option("Q172O4","Q172","[2, 4, 6, 8, 10]", None, 0)

# insert_question("Q173","Information technology (IT)","Python programming", "Which of the following is not a valid built-in function in Python?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q173O1","Q173","int", None, 0)
# insert_question_option("Q173O2","Q173","string", None, 0)
# insert_question_option("Q173O3","Q173","boolean", None, 0)
# insert_question_option("Q173O4","Q173","array", None, 1)

# insert_question("Q174","Information technology (IT)","Python programming", "Which of the following is not a valid Python data type?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q174O1","Q174","int", None, 0)
# insert_question_option("Q174O2","Q174","char", None, 1)
# insert_question_option("Q174O3","Q174","float", None, 0)
# insert_question_option("Q174O4","Q174","str", None, 0)

# insert_question("Q175","Information technology (IT)","Python programming", "In Python, which function is used to read a line from the console input?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q175O1","Q175","input()", None, 1)
# insert_question_option("Q175O2","Q175","read_line()", None, 0)
# insert_question_option("Q175O3","Q175","console_input()", None, 0)
# insert_question_option("Q175O4","Q175","getline()", None, 0)

# insert_question("Q176","Information technology (IT)","Python programming", '''What will be the output of the following Python code?
# print("Hello {name1} and {name2}".format(name1='foo', name2='bin'))''', None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q176O1","Q176","Hello foo and bin", None, 1)
# insert_question_option("Q176O2","Q176","Hello {name1} and {name2}", None, 0)
# insert_question_option("Q176O3","Q176","Error", None, 0)
# insert_question_option("Q176O4","Q176","Hello and", None, 0)

# insert_question("Q177","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# print(2**3 + (5 + 6)**(1 + 1))""", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q177O1","Q177","129", None, 1)
# insert_question_option("Q177O2","Q177","8", None, 0)
# insert_question_option("Q177O3","Q177","121", None, 0)
# insert_question_option("Q177O4","Q177","None of above.", None, 0)

# insert_question("Q178","Information technology (IT)","Python programming", '''What will be the datatype of the var in the below code snippet?

# var = 10
# print(type(var))
# var = "Hello"
# print(type(var))''', None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q178O1","Q178","str and int", None, 0)
# insert_question_option("Q178O2","Q178","int and int", None, 0)
# insert_question_option("Q178O3","Q178","str and str", None, 0)
# insert_question_option("Q178O4","Q178","int and str", None, 1)

# insert_question("Q179","Information technology (IT)","Python programming", "How is a code block indicated in Python?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q179O1","Q179","Brackets.", None, 0)
# insert_question_option("Q179O2","Q179","Indentation.", None, 1)
# insert_question_option("Q179O3","Q179","Key.", None, 0)
# insert_question_option("Q179O4","Q179","None of above.", None, 0)

# insert_question("Q180","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# a = [1, 2, 3]
# a = tuple(a)
# a[0] = 2
# print(a)""", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q180O1","Q180","[2,2,3]", None, 0)
# insert_question_option("Q180O2","Q180","(2,2,3)", None, 0)
# insert_question_option("Q180O3","Q180","(1,2,3)", None, 0)
# insert_question_option("Q180O4","Q180","Error.", None, 1)

# insert_question("Q181","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# print(type(5 / 2))
# print(type(5 // 2))""", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q181O1","Q181","float and int", None, 1)
# insert_question_option("Q181O2","Q181","int and float", None, 0)
# insert_question_option("Q181O3","Q181","float and float", None, 0)
# insert_question_option("Q181O4","Q181","int and int", None, 0)

# insert_question("Q182","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# a = [1, 2, 3, 4, 5]
# sum = 0
# for ele in a:
#    sum += ele 
# print(sum)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q182O1","Q182","15", None, 1)
# insert_question_option("Q182O2","Q182","0", None, 0)
# insert_question_option("Q182O3","Q182","20", None, 0)
# insert_question_option("Q182O4","Q182","None of these", None, 0)

# insert_question("Q183","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# a = 3
# b = 1 
# print(a, b)
# a, b = b, a 
# print(a, b)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q183O1","Q183","3 1 1 3", None, 1)
# insert_question_option("Q183O2","Q183","3 1 3 1", None, 0)
# insert_question_option("Q183O3","Q183","1 3 1 3", None, 0)
# insert_question_option("Q183O4","Q183","1 3 3 1", None, 0)

# insert_question("Q184","Information technology (IT)","Python programming", "Which of the following types of loops are not supported in Python?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q184O1","Q184","for", None, 0)
# insert_question_option("Q184O2","Q184","while", None, 0)
# insert_question_option("Q184O3","Q184","do-while", None, 1)
# insert_question_option("Q184O4","Q184","None of above", None, 0)

# insert_question("Q185","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# example = ["Sunday", "Monday", "Tuesday", "Wednesday"];
# del example[2]
# print(example)''', None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q185O1","Q185",'["Sunday", "Monday", "Tuesday", "Wednesday"]', None, 0)
# insert_question_option("Q185O2","Q185",'["Sunday", "Monday", "Wednesday"]', None, 1)
# insert_question_option("Q185O3","Q185",'["Monday", "Tuesday", "Wednesday"]', None, 0)
# insert_question_option("Q185O4","Q185",'["Sunday", "Monday", "Tuesday"]', None, 0)

# insert_question("Q186","Information technology (IT)","Python programming", "Which of the following is the proper syntax to check if a particular element is present in a list?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q186O1","Q186","if ele in list", None, 0)
# insert_question_option("Q186O2","Q186","if not ele in list", None, 0)
# insert_question_option("Q186O3","Q186","Both A and B", None, 1)
# insert_question_option("Q186O4","Q186","None of above", None, 0)

# insert_question("Q187","Information technology (IT)","Python programming", """What will be the type of the variable sorted_numbers in the below code snippet?

# numbers = (4, 7, 19, 2, 89, 45, 72, 22)
# sorted_numbers = sorted(numbers)
# print(sorted_numbers)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q187O1","Q187","List", None, 1)
# insert_question_option("Q187O2","Q187","Tuple", None, 0)
# insert_question_option("Q187O3","Q187","String", None, 0)
# insert_question_option("Q187O4","Q187","Int", None, 0)

# insert_question("Q188","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# def thrive(n):
#  if n % 15 == 0:
#    print("thrive", end = " ")
#  elif n % 3 != 0 and n % 5 != 0:
#    print("neither", end = " ")
#  elif n % 3 == 0:
#    print("three", end = " ")
#  elif n % 5 == 0:
#    print("five", end = " ")
# thrive(35)
# thrive(56)
# thrive(15)
# thrive(39)''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q188O1","Q188","five neither thrive three", None, 1)
# insert_question_option("Q188O2","Q188","five neither three thrive", None, 0)
# insert_question_option("Q188O3","Q188","three three three three", None, 0)
# insert_question_option("Q188O4","Q188","five neither five neither", None, 0)

# insert_question("Q189","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# numbers = (4, 7, 19, 2, 89, 45, 72, 22)
# sorted_numbers = sorted(numbers)
# even = lambda a: a % 2 == 0
# even_numbers = filter(even, sorted_numbers)
# print(type(even_numbers))""", None, "Hard", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q189O1","Q189","filter", None, 1)
# insert_question_option("Q189O2","Q189","int", None, 0)
# insert_question_option("Q189O3","Q189","list", None, 0)
# insert_question_option("Q189O4","Q189","tuple", None, 0)

# insert_question("Q190","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# numbers = (4, 7, 19, 2, 89, 45, 72, 22)
# sorted_numbers = sorted(numbers)
# odd_numbers = [x for x in sorted_numbers if x % 2 != 0]
# print(odd_numbers)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q190O1","Q190","[7,19,45,89]", None, 1)
# insert_question_option("Q190O2","Q190","[2,4,22,72]", None, 0)
# insert_question_option("Q190O3","Q190","[4,7,19,2,89,45,72,22]", None, 0)
# insert_question_option("Q190O4","Q190","[2,4,7,19,22,45,72,89]", None, 0)

# insert_question("Q191","Information technology (IT)","Python programming", '''def is_even(number):
#   message =  f"{number} is an even number" if number % 2 == 0 else  f"{number} is an odd number"
#  return message
# print(is_even(54))''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q191O1","Q191","54 is an even number", None, 1)
# insert_question_option("Q191O2","Q191","54 is an odd number", None, 0)
# insert_question_option("Q191O3","Q191","number is an even number", None, 0)
# insert_question_option("Q191O4","Q191","number is an even number", None, 0)

# insert_question("Q192","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# dict1 = {'first' : 'sunday', 'second' : 'monday'}
# dict2 = {1: 3, 2: 4}
# dict1.update(dict2)
# print(dict1)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q192O1","Q192","{'first' : 'sunday', 'second' : 'monday', 1: 3, 2: 4}", None, 1)
# insert_question_option("Q192O2","Q192","{'first' : 'sunday', 'second' : 'monday'}", None, 0)
# insert_question_option("Q192O3","Q192","{1: 3, 2: 4}", None, 0)
# insert_question_option("Q192O4","Q192","None of above", None, 0)

# insert_question("Q193","Information technology (IT)","Python programming", """a = {'Hello':'World', 'First': 1}
# b = {val: k for k , val in a.items()}
# print(b)""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q193O1","Q193","{'Hello':'World', 'First': 1}", None, 0)
# insert_question_option("Q193O2","Q193","{'World':'Hello', 1: 'First'}", None, 1)
# insert_question_option("Q193O3","Q193","Can be both A and B", None, 0)
# insert_question_option("Q193O4","Q193","None of above", None, 0)

# insert_question("Q194","Information technology (IT)","Python programming", "Which of the following functions converts date to corresponding time in Python?", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q194O1","Q194","strptime()", None, 1)
# insert_question_option("Q194O2","Q194","strftime()", None, 0)
# insert_question_option("Q194O3","Q194","both A and B", None, 0)
# insert_question_option("Q194O4","Q194","None of above", None, 0)

# insert_question("Q195","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# word = "Python Programming"
# n = len(word)
# word1 = word.upper()
# word2 = word.lower()
# converted_word = ""
# for i in range(n):
#  if i % 2 == 0:
#    converted_word += word2[i]
#  else:
#    converted_word += word1[i]
# print(converted_word)''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q195O1","Q195","pYtHoN PrOgRaMmInG", None, 1)
# insert_question_option("Q195O2","Q195","Python programming", None, 0)
# insert_question_option("Q195O3","Q195","python programming", None, 0)
# insert_question_option("Q195O4","Q195","PYTHON PROGRAMMING", None, 0)

# insert_question("Q196","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# a = "4, 5"
# nums = a.split(',')
# x, y = nums
# int_prod = int(x) * int(y)
# print(int_prod)''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q196O1","Q196","4*5", None, 0)
# insert_question_option("Q196O2","Q196","20", None, 1)
# insert_question_option("Q196O3","Q196","45", None, 0)
# insert_question_option("Q196O4","Q196","4,5", None, 0)

# insert_question("Q197","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# def tester(*argv):
#    for arg in argv:
#        print(arg, end = ' ')
# tester('Sunday', 'Monday', 'Tuesday', 'Wednesday')""", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q197O1","Q197","Sunday", None, 0)
# insert_question_option("Q197O2","Q197","Wednesday", None, 0)
# insert_question_option("Q197O3","Q197","Sunday Monday Tuesday Wednesday", None, 1)
# insert_question_option("Q197O4","Q197","None of above.", None, 0)

# insert_question("Q198","Information technology (IT)","Python programming", "As what datatype are the *args stored, when passed into a function?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q198O1","Q198","List", None, 0)
# insert_question_option("Q198O2","Q198","Tuple", None, 1)
# insert_question_option("Q198O3","Q198","Dictionary", None, 0)
# insert_question_option("Q198O4","Q198","Set", None, 0)

# insert_question("Q199","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# def tester(**kwargs):
#    for key, value in kwargs.items():
#        print(key, value, end = " ")
# tester(Sunday = 1, Monday = 2, Tuesday = 3, Wednesday = 4)''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q199O1","Q199","Sunday 1 Monday 2 Tuesday 3 Wednesday 4", None, 1)
# insert_question_option("Q199O2","Q199","Sunday 1", None, 0)
# insert_question_option("Q199O3","Q199","Wednesday 4", None, 0)
# insert_question_option("Q199O4","Q199","None of above.", None, 0)

# insert_question("Q200","Information technology (IT)","Python programming", "As what datatype are the *kwargs stored, when passed into a function?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q200O1","Q200","List", None, 0)
# insert_question_option("Q200O2","Q200","Tuple", None, 0)
# insert_question_option("Q200O3","Q200","Dictionary", None, 1)
# insert_question_option("Q200O4","Q200","Set", None, 0)

# insert_question("Q201","Information technology (IT)","Python programming", "Which of the following blocks will always be executed whether an exception is encountered or not in a program?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q201O1","Q201","try", None, 0)
# insert_question_option("Q201O2","Q201","except", None, 0)
# insert_question_option("Q201O3","Q201","finally", None, 1)
# insert_question_option("Q201O4","Q201","None of above.", None, 0)

# insert_question("Q202","Information technology (IT)","Python programming", """
# What will be the output of the following code snippet?

# from math import *
# a = 2.19
# b = 3.999999
# c = -3.30
# print(int(a), floor(b), ceil(c), fabs(c))""", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q202O1","Q202","2 3 -3 3.3", None, 1)
# insert_question_option("Q202O2","Q202","3 4 -3 3", None, 0)
# insert_question_option("Q202O3","Q202","2 3 -3 3", None, 0)
# insert_question_option("Q202O4","Q202","2 3 -3 -3.3", None, 0)

# insert_question("Q203","Information technology (IT)","Python programming", """What will be the output of the following code snippet?

# set1 = {1, 3, 5}
# set2 = {2, 4, 6}
# print(len(set1 + set2))""", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q203O1","Q203","3", None, 0)
# insert_question_option("Q203O2","Q203","6", None, 0)
# insert_question_option("Q203O3","Q203","0", None, 0)
# insert_question_option("Q203O4","Q203","Error", None, 1)

# insert_question("Q204","Information technology (IT)","Python programming", "What keyword is used in Python to raise exceptions?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q204O1","Q204","raise", None, 1)
# insert_question_option("Q204O2","Q204","goto", None, 0)
# insert_question_option("Q204O3","Q204","try", None, 0)
# insert_question_option("Q204O4","Q204","except", None, 0)

# insert_question("Q205","Information technology (IT)","Python programming", """
# What will be the output of the following code snippet?

# s1 = {1, 2, 3, 4, 5}
# s2 = {2, 4, 6}
# print(s1 ^ s2)""", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q205O1","Q205","{1, 2, 3, 4, 5}", None, 0)
# insert_question_option("Q205O2","Q205","{1, 3, 4, 5}", None, 1)
# insert_question_option("Q205O3","Q205","{2, 4}", None, 0)
# insert_question_option("Q205O4","Q205","None of above.", None, 0)

# insert_question("Q206","Information technology (IT)","Python programming", "Which of the following are valid escape sequences in Python?", None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q206O1","Q206","\n", None, 0)
# insert_question_option("Q206O2","Q206","\t", None, 0)
# insert_question_option("Q206O3","Q206","\\", None, 0)
# insert_question_option("Q206O4","Q206","All of above.", None, 1)

# insert_question("Q207","Information technology (IT)","Python programming", "Which of the following is not a valid set operation in python?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q207O1","Q207","Union", None, 0)
# insert_question_option("Q207O2","Q207","Intersection", None, 0)
# insert_question_option("Q207O3","Q207","Difference", None, 0)
# insert_question_option("Q207O4","Q207","None of above.", None, 1)

# insert_question("Q208","Information technology (IT)","Python programming", "Which of the following are valid string manipulation functions in Python?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q208O1","Q208","count()", None, 0)
# insert_question_option("Q208O2","Q208","split()", None, 0)
# insert_question_option("Q208O3","Q208","upper()", None, 0)
# insert_question_option("Q208O4","Q208","All of above.", None, 1)

# insert_question("Q209","Information technology (IT)","Python programming", "How can assertions be disabled in Python?", None, "Hard", "Multiple choice", 2, "navarromark")
# insert_question_option("Q209O1","Q209","Passing -O when running Python.", None, 1)
# insert_question_option("Q209O2","Q209","Assertions are disabled by default.", None, 0)
# insert_question_option("Q209O3","Q209","Both A and B are wrong.", None, 0)
# insert_question_option("Q209O4","Q209","Assertions can't be disabled in Python.", None, 0)

# insert_question("Q210","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# a = [[], "abc", [0], 1, 0]
# print(list(filter(bool, a)))''', None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q210O1","Q210","['abc',[0],1]", None, 1)
# insert_question_option("Q210O2","Q210","[1]", None, 0)
# insert_question_option("Q210O3","Q210",'["abc"]', None, 0)
# insert_question_option("Q210O4","Q210","None of above.", None, 0)

# insert_question("Q211","Information technology (IT)","Python programming", "In which language is Python written?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q211O1","Q211","C++", None, 0)
# insert_question_option("Q211O2","Q211","C", None, 1)
# insert_question_option("Q211O3","Q211","Java", None, 0)
# insert_question_option("Q211O4","Q211","C#", None, 0)

# insert_question("Q212","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# count = 0
# while(True):
#    if count % 3 == 0:
#        print(count, end = " ")
#    if(count > 15):
#        break;
#    count += 1''', None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q212O1","Q212","0 1 2 ... 15", None, 0)
# insert_question_option("Q212O2","Q212","Infinite loop", None, 0)
# insert_question_option("Q212O3","Q212","0 3 6 9 12 15", None, 1)
# insert_question_option("Q212O4","Q212","0 3 6 9 12", None, 0)

# insert_question("Q213","Information technology (IT)","Python programming", "Which of the following concepts is not a part of Python?", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q213O1","Q213","GUI design", None, 0)
# insert_question_option("Q213O2","Q213","Pointers", None, 1)
# insert_question_option("Q213O3","Q213","Dynamic typing", None, 0)
# insert_question_option("Q213O4","Q213","OOP", None, 0)

# insert_question("Q214","Information technology (IT)","Python programming", '''What will be the output of the following code snippet?

# def func():
#    global value
#    value = "Local"
   
# value = "Global"
# func()
# print(value)''', None, "Normal", "Multiple choice", 2, "fpeck")
# insert_question_option("Q214O1","Q214","Local", None, 1)
# insert_question_option("Q214O2","Q214","Global", None, 0)
# insert_question_option("Q214O3","Q214","None", None, 0)
# insert_question_option("Q214O4","Q214","Can't be predicted.", None, 0)

# insert_question("Q215","Information technology (IT)","Python programming", "In which year was the Python language developed?", None, "Normal", "Multiple choice", 2, "haledonald")
# insert_question_option("Q215O1","Q215","1995", None, 0)
# insert_question_option("Q215O2","Q215","1972", None, 0)
# insert_question_option("Q215O3","Q215","1981", None, 0)
# insert_question_option("Q215O4","Q215","1989", None, 1)

# insert_question("Q216","Information technology (IT)","Python programming", "Which one of the following is the correct extension of the Python file?", None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q216O1","Q216",".py", None, 1)
# insert_question_option("Q216O2","Q216",".python", None, 0)
# insert_question_option("Q216O3","Q216",".p", None, 0)
# insert_question_option("Q216O4","Q216","None of these", None, 0)

# insert_question("Q217","Information technology (IT)","Python programming", "In which year was the Python 3.0 version developed?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q217O1","Q217","2008", None, 1)
# insert_question_option("Q217O2","Q217","2000", None, 0)
# insert_question_option("Q217O3","Q217","2010", None, 0)
# insert_question_option("Q217O4","Q217","2005", None, 0)

# insert_question("Q218","Information technology (IT)","Python programming", "Which of the following statements is correct regarding the object-oriented programming concept in Python?", None, "Normal", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q218O1","Q218","Classes are real-world entities while objects are not real", None, 0)
# insert_question_option("Q218O2","Q218","Objects are real-world entities while classes are not real", None, 1)
# insert_question_option("Q218O3","Q218","Both objects and classes are real-world entities", None, 0)
# insert_question_option("Q218O4","Q218","All of the above", None, 0)

# insert_question("Q219","Information technology (IT)","Python programming", "Which of the following declarations is incorrect?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q219O1","Q219","_x = 2", None, 0)
# insert_question_option("Q219O2","Q219","__x = 3", None, 0)
# insert_question_option("Q219O3","Q219","__xyz__ = 5", None, 0)
# insert_question_option("Q219O4","Q219","None of these", None, 1)

# insert_question("Q220","Information technology (IT)","Python programming", "Which of the following declarations is incorrect in python language?", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q220O1","Q220","xyzp = 5,000,000", None, 0)
# insert_question_option("Q220O2","Q220","x y z p = 5000 6000 7000 8000", None, 1)
# insert_question_option("Q220O3","Q220","x,y,z,p = 5000, 6000, 7000, 8000", None, 0)
# insert_question_option("Q220O4","Q220","x_y_z_p = 5,000,000", None, 0)

# insert_question("Q221","Information technology (IT)","Python programming", "Which of the following words cannot be a variable in python language?", None, "Easy", "Multiple choice", 2, "chris89")
# insert_question_option("Q221O1","Q221","_val", None, 0)
# insert_question_option("Q221O2","Q221","val", None, 0)
# insert_question_option("Q221O3","Q221","try", None, 1)
# insert_question_option("Q221O4","Q221","_try_", None, 0)

# insert_question("Q222","Information technology (IT)","Python programming", "Which of the following precedence order is correct in Python?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q222O1","Q222","Parentheses, Exponential, Multiplication, Division, Addition, Subtraction", None, 1)
# insert_question_option("Q222O2","Q222","Multiplication, Division, Addition, Subtraction, Parentheses, Exponential", None, 0)
# insert_question_option("Q222O3","Q222","Division, Multiplication, Addition, Subtraction, Parentheses, Exponential", None, 0)
# insert_question_option("Q222O4","Q222","Exponential, Parentheses, Multiplication, Division, Addition, Subtraction", None, 0)

# insert_question("Q223","Information technology (IT)","Python programming", "Which of the following is correctly evaluated for pow(x,y,z)?", None, "Normal", "Multiple choice", 2, "ezhang")
# insert_question_option("Q223O1","Q223","(x**y) / z", None, 0)
# insert_question_option("Q223O2","Q223","(x / y) * z", None, 0)
# insert_question_option("Q223O3","Q223","(x**y) % z", None, 1)
# insert_question_option("Q223O4","Q223","(x / y) / z", None, 0)

# insert_question("Q224","Information technology (IT)","Python programming", "What will be the output of print(ord('h') - ord('z')) ?", None, "Hard", "Multiple choice", 2, "fpeck")
# insert_question_option("Q224O1","Q224","18", None, 0)
# insert_question_option("Q224O2","Q224","-18", None, 1)
# insert_question_option("Q224O3","Q224","17", None, 0)
# insert_question_option("Q224O4","Q224","-17", None, 0)

# insert_question("Q225","Information technology (IT)","Python programming", '''What error will occur when you execute the following code?

# MANGO = APPLE ''', None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q225O1","Q225","NameError", None, 1)
# insert_question_option("Q225O2","Q225","SyntaxError", None, 0)
# insert_question_option("Q225O3","Q225","TypeError", None, 0)
# insert_question_option("Q225O4","Q225","ValueError", None, 0)

# insert_question("Q226","Information technology (IT)","Python programming", "Which company developed the Python programming language?", None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q226O1","Q226","Microsoft", None, 0)
# insert_question_option("Q226O2","Q226","Google", None, 0)
# insert_question_option("Q226O3","Q226","Mozilla", None, 0)
# insert_question_option("Q226O4","Q226","CWI (Centrum Wiskunde & Informatica)", None, 1)

# insert_question("Q227","Information technology (IT)","Python programming", "Which is not an OOP principle?", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q227O1","Q227","Inheritance", None, 0)
# insert_question_option("Q227O2","Q227","Polymorphism", None, 0)
# insert_question_option("Q227O3","Q227","Encapsulation", None, 0)
# insert_question_option("Q227O4","Q227","Concatenation", None, 1)

# insert_question("Q228","Information technology (IT)","Python programming", "Which is used for private data members in Python?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q228O1","Q228","- (dash)", None, 0)
# insert_question_option("Q228O2","Q228","_ (underscore)", None, 1)
# insert_question_option("Q228O3","Q228","! (exclamation mark)", None, 0)
# insert_question_option("Q228O4","Q228","# (hash)", None, 0)

# insert_question("Q229","Information technology (IT)","Python programming", "Which function opens a file for reading in Python?", None, "Easy", "Multiple choice", 2, "navarromark")
# insert_question_option("Q229O1","Q229","openFile()", None, 0)
# insert_question_option("Q229O2","Q229","fileOpen()", None, 0)
# insert_question_option("Q229O3","Q229","open()", None, 1)
# insert_question_option("Q229O4","Q229","readFile()", None, 0)

# insert_question("Q230","Information technology (IT)","Python programming", "Which mode is used for binary reading in Python?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q230O1","Q230","'r'", None, 0)
# insert_question_option("Q230O2","Q230","'rb'", None, 1)
# insert_question_option("Q230O3","Q230","'r+'", None, 0)
# insert_question_option("Q230O4","Q230","'r+'", None, 0)

# insert_question("Q231","Information technology (IT)","Python programming", "Which of the following can't be a dictionary key?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q231O1","Q231","Integer", None, 0)
# insert_question_option("Q231O2","Q231","String", None, 0)
# insert_question_option("Q231O3","Q231","List", None, 1)
# insert_question_option("Q231O4","Q231","Tuple", None, 0)

# insert_question("Q232","Information technology (IT)","Python programming", "Which method is used to replace parts of a string?", None, "Easy", "Multiple choice", 2, "christinalee")
# insert_question_option("Q232O1","Q232","switch()", None, 0)
# insert_question_option("Q232O2","Q232","change()", None, 0)
# insert_question_option("Q232O3","Q232","modify()", None, 0)
# insert_question_option("Q232O4","Q232","replace()", None, 1)

# insert_question("Q233","Information technology (IT)","Python programming", "Which exception is raised when dividing by zero in Python?", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q233O1","Q233","ValueError", None, 0)
# insert_question_option("Q233O2","Q233","TypeError", None, 0)
# insert_question_option("Q233O3","Q233","ZeroDivisionError", None, 1)
# insert_question_option("Q233O4","Q233","ArithmeticError", None, 0)

# insert_question("Q234","Information technology (IT)","Python programming", 'What is the result of list("Python")?', None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q234O1","Q234","[P, y, t, h, o, n]", None, 0)
# insert_question_option("Q234O2","Q234",'["Python"]', None, 0)
# insert_question_option("Q234O3","Q234",'["P", "y", "t", "h", "o", "n"]', None, 1)
# insert_question_option("Q234O4","Q234","Error", None, 0)

# insert_question("Q235","Information technology (IT)","Python programming", "How to add an element to the end of a list?", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q235O1","Q235","insert()", None, 0)
# insert_question_option("Q235O2","Q235","append()", None, 1)
# insert_question_option("Q235O3","Q235","add()", None, 0)
# insert_question_option("Q235O4","Q235","put()", None, 0)

# insert_question("Q236","Information technology (IT)","Python programming", "Which of these creates an empty dictionary?", None, "Easy", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q236O1","Q236","dict{}", None, 0)
# insert_question_option("Q236O2","Q236","{}", None, 1)
# insert_question_option("Q236O3","Q236","[]", None, 0)
# insert_question_option("Q236O4","Q236","()", None, 0)

# insert_question("Q237","Information technology (IT)","Python programming", "Which of the following can be a valid variable name in Python?", None, "Easy", "Multiple choice", 2, "jknight")
# insert_question_option("Q237O1","Q237","2apple", None, 0)
# insert_question_option("Q237O2","Q237","apple-pie", None, 0)
# insert_question_option("Q237O3","Q237","apple_pie", None, 1)
# insert_question_option("Q237O4","Q237","@apple", None, 0)

# insert_question("Q238","Information technology (IT)","Python programming", "Which of the following creates a new reference to the same list?", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q238O1","Q238","list.copy()", None, 0)
# insert_question_option("Q238O2","Q238","list = list", None, 1)
# insert_question_option("Q238O3","Q238","list[:]", None, 0)
# insert_question_option("Q238O4","Q238","new_list = [] + list", None, 0)

# insert_question("Q239","Information technology (IT)","Python programming", "Which method checks if the string starts with a particular substring?", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q239O1","Q239","startswith()", None, 1)
# insert_question_option("Q239O2","Q239","beginswith()", None, 0)
# insert_question_option("Q239O3","Q239","first()", None, 0)
# insert_question_option("Q239O4","Q239","isfirst()", None, 0)

# insert_question("Q240","Information technology (IT)","Python programming", "Which string method removes white spaces from both the beginning and the end?", None, "Easy", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q240O1","Q240","strip()", None, 1)
# insert_question_option("Q240O2","Q240","clean()", None, 0)
# insert_question_option("Q240O3","Q240","trim()", None, 0)
# insert_question_option("Q240O4","Q240","wipe()", None, 0)

# insert_question("Q241","Information technology (IT)","Python programming", "What is the purpose of the global keyword in Python?", None, "Normal", "Multiple choice", 2, "chris89")
# insert_question_option("Q241O1","Q241","To create a global variable", None, 0)
# insert_question_option("Q241O2","Q241","To use a module-level variable inside a function", None, 1)
# insert_question_option("Q241O3","Q241","To define a global function", None, 0)
# insert_question_option("Q241O4","Q241","None of the above", None, 0)

# insert_question("Q242","Information technology (IT)","Python programming", "Which of the following defines a lambda function that doubles a number?", None, "Normal", "Multiple choice", 2, "christinalee")
# insert_question_option("Q242O1","Q242","double = lambda x: 2x", None, 0)
# insert_question_option("Q242O2","Q242","double = (lambda x: 2x)", None, 0)
# insert_question_option("Q242O3","Q242","double = lambda x: x*2", None, 1)
# insert_question_option("Q242O4","Q242","double(x) = lambda: x*2", None, 0)

# insert_question("Q243","Information technology (IT)","Python programming", "Python is a ___object-oriented programming language.", None, "Easy", "Multiple choice", 2, "ezhang")
# insert_question_option("Q243O1","Q243","Special purpose", None, 0)
# insert_question_option("Q243O2","Q243","General purpose", None, 1)
# insert_question_option("Q243O3","Q243","Medium level programming language", None, 0)
# insert_question_option("Q243O4","Q243","All of the mentioned above", None, 0)

# insert_question("Q244","Information technology (IT)","Python programming", "Amongst which of the following is / are the application areas of Python programming?", None, "Easy", "Multiple choice", 2, "fpeck")
# insert_question_option("Q244O1","Q244","Web Development", None, 0)
# insert_question_option("Q244O2","Q244","Game Development", None, 0)
# insert_question_option("Q244O3","Q244","Artificial Intelligence and Machine Learning", None, 0)
# insert_question_option("Q244O4","Q244","All of the mentioned above", None, 1)

# insert_question("Q245","Information technology (IT)","Python programming", "bytes, bytearray, memoryview are type of the ___ data type.", None, "Easy", "Multiple choice", 2, "haledonald")
# insert_question_option("Q245O1","Q245","Mapping Type", None, 0)
# insert_question_option("Q245O2","Q245","Boolean Type", None, 0)
# insert_question_option("Q245O3","Q245","Binary Types", None, 1)
# insert_question_option("Q245O4","Q245","None of the mentioned above", None, 0)

# insert_question("Q246","Information technology (IT)","Python programming", '''Consider the following code segment and identify what will be the output of given Python code?

# a = int(input("Enter an integer: "))
# b = int(input("Enter an integer: "))

# if a <= 0:
#     b = b +1
# else:
#     a = a + 1''', None, "Normal", "Multiple choice", 2, "hannahconner")
# insert_question_option("Q246O1","Q246","if inputted number is a negative integer then b = b +1", None, 0)
# insert_question_option("Q246O2","Q246","if inputted number is a positive integer then a = a +1", None, 0)
# insert_question_option("Q246O3","Q246","Both A and B", None, 1)
# insert_question_option("Q246O4","Q246","None of the mentioned above", None, 0)

# insert_question("Q247","Information technology (IT)","Python programming", "In Python, the break and continue statements, together are called ___ statement.", None, "Normal", "Multiple choice", 2, "jknight")
# insert_question_option("Q247O1","Q247","Jump", None, 0)
# insert_question_option("Q247O2","Q247","goto", None, 1)
# insert_question_option("Q247O3","Q247","compound", None, 0)
# insert_question_option("Q247O4","Q247","None of the mentioned above", None, 0)

# insert_question("Q248","Information technology (IT)","Python programming", "Loops are known as ___ in programming.", None, "Easy", "Multiple choice", 2, "jsaunders")
# insert_question_option("Q248O1","Q248","Control flow statements", None, 1)
# insert_question_option("Q248O2","Q248","Conditional statements", None, 0)
# insert_question_option("Q248O3","Q248","Data structure statements", None, 0)
# insert_question_option("Q248O4","Q248","None of the mentioned above", None, 0)

# insert_question("Q249","Information technology (IT)","Python programming", "Amongst which of the following shows the types of function calls in Python?", None, "Normal", "Multiple choice", 2, "navarromark")
# insert_question_option("Q249O1","Q249","Call by value", None, 0)
# insert_question_option("Q249O2","Q249","Call by reference", None, 0)
# insert_question_option("Q249O3","Q249","Both A and B", None, 1)
# insert_question_option("Q249O4","Q249","None of the mentioned above", None, 0)

# insert_question("Q250","Information technology (IT)","Python programming", "The seek() method is used to ___.", None, "Normal", "Multiple choice", 2, "phelpsashley")
# insert_question_option("Q250O1","Q250","Saves the file in secondary storage", None, 0)
# insert_question_option("Q250O2","Q250","Position the file object at a particular position in a file", None, 1)
# insert_question_option("Q250O3","Q250","Deletes the file form secondary storage", None, 0)
# insert_question_option("Q250O4","Q250","None of the mentioned above", None, 0)

#------------------------part2: Python programming - Descriptive/Practical questions
# insert_question("Q251","Information technology (IT)","Python programming", """
# Write a function to test if a number is prime or not.
# Hint: A natural number (1, 2, 3, 4, 5, 6, etc.) is called a prime number (or a prime) if it is greater than 1 and cannot be written as the product of two smaller natural numbers. 
# The numbers greater than 1 that are not prime are called composite numbers
# Note: see the sample input and outputs in the attatchment image.""", "..\images\Q251.png", "Easy", "Descriptive/Practical", 5, "chris89")
# insert_question_option("Q251O1","Q251","""
# def is_prime(x):
#     if x == 1:
#         return True
#     elif x>1:
#         for i in range(2,x):
#             if x % i == 0:
#                 return False
#         return True       
#     return False
# """, None, 1)

# insert_question("Q252","Information technology (IT)","Python programming", "Write a program that gets two integers from the user and swap them without third variable then print them.", None, "Easy", "Descriptive/Practical", 5, "chris89")
# insert_question_option("Q252O1","Q252","""
# # Method 1
# a = int(input("Enter first number (a): "))
# b = int(input("Enter first number (b): "))
# a = a - b
# b = a + b
# a = a + b 
# print("After swapping")
# print(f"a : {a}")
# print(f"b : {b}")
                       
# # Method 2
# a = int(input("Enter first number (a): "))
# b = int(input("Enter first number (b): "))
# a, b = b, a
# print("After swapping")
# print(f"a : {a}")
# print(f"b : {b}")
# Note: there are some other methods for swapping a, b like using * and /, that are valid. 
# """, None, 1)

# insert_question("Q253","Information technology (IT)","Python programming", """Write a program that gets two positive integers a, b from the user then:
# 1- calculates greatest common divisor(GCD) of a and b
# 2- calculates least common multiple(LCM) of a and b
# 3- checks if a and b are coprime

# hints:
# 1- In mathematics, the greatest common divisor (GCD) of two or more integers, which are not all zero, is the largest positive integer that divides each of the integers. For example, the GCD of 8 and 12 is 4
# 2- In arithmetic and number theory, the least common multiple, lowest common multiple, or smallest common multiple of two integers a and b, usually denoted by lcm(a, b), is the smallest positive integer that is divisible by both a and b
# 3- In number theory, two integers a and b are coprime, relatively prime or mutually prime if the only positive integer that is a divisor of both of them is 1
# Note1: Do not use built-in functions.
# Note2: see the sample input and outputs in the attatchment image.""", "..\images\Q253.png", "Normal", "Descriptive/Practical", 10, "ezhang")
# insert_question_option("Q253O1","Q253","""
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1 
# Note: there are some other methods for gcd and lcm calculation, but not this efficent, but are valid.                 
# """, None, 1)

# insert_question("Q254","Information technology (IT)","Python programming", """
# Write a program that gets a number and a destination base from the user and first detects its number system (binary, octal, decimal, hexadecimal)
# if the number is in none of these bases, raises an error with relative message. then if the base was valid convert it to the destination base
# Note: see the sample input and outputs in the attatchment image.  
# """, "..\images\Q254.png", "Hard", "Descriptive/Practical", 30, "ezhang")
# insert_question_option("Q254O1","Q254","""
# # Step 1 - base detection function
# def detect_base(x):
#     if x.startswith("0x"):
#         return 'hexadecimal'
#     elif x.startswith("0"):
#         return 'octal'
#     elif set(x).issubset({'0','1'}):
#         return 'binary'
#     elif set(x).issubset({'0','1','2','3','4','5','6','7','8','9'}):
#         return 'decimal'
#     else:
#         raise ValueError('Invalid number format.')
# # Note: there are some other methods for base detection, but not this efficent, but are valid.
# # Step 2 - base conversion functions from and to decimal
# def bin_dec(x): return int(x,2)
# def dec_bin(x): return bin(x)[2:]
# def oct_dec(x): return int(x,8)
# def dec_oct(x): return oct(x)[2:]
# def hex_dec(x): return int(x,16)
# def dec_hex(x): return hex(x)[2:]
# # Note: there are some other methods for base conversion, but not this efficent, but are valid.
# # Step 3 - base conversion based on detected base and destination base
# def convert(x, des_base):
#     src_base = detect_base(x)
#     if src_base == des_base:
#         return x
#     match src_base:
#         case 'binary': dec = bin_dec(x)
#         case 'decimal': dec = int(x)
#         case 'octal': dec = oct_dec(x)
#         case 'hexadecimal': dec = hex_dec(x)
#     match des_base:
#         case 'binary': return dec_bin(dec)
#         case 'decimal': return str(dec)
#         case 'octal': return dec_oct(dec)
#         case 'hexadecimal': return dec_hex(dec)
# """, None, 1)

# insert_question("Q255","Information technology (IT)","Python programming", """
# Write a program that gets a positive integer and prints the maximum and minimum numbers that can be constructed with its digits...:
# 1- if the effective digits of the min and max numbers be exactly equal to the first number(zeros don't show up in the combination leading digit)
# 2- if the effective digits of the min and max numbers can be less than first number(zeros may show up in the combination leading digits and be omitted)
# Note: see the sample input and outputs in the attatchment image.               
# """, "..\images\Q255.png", "Hard", "Descriptive/Practical", 30, "fpeck")
# insert_question_option("Q255O1","Q255","""
# def find_min_max_1(a):
#     digits = [int(digit) for digit in str(a)]
#     max_num = int("".join(map(str, sorted(digits, reverse=True))))
#     min_num = int("".join(map(str, sorted(digits))))
#     sorted_digits = sorted(digits)
#     if sorted_digits[0] == 0:
#         for i in range(1, len(sorted_digits)):
#             if sorted_digits[i] != 0:
#                 sorted_digits[0], sorted_digits[i] = sorted_digits[i], sorted_digits[0]
#                 break
#     min_num = int("".join(map(str, sorted(digits))))
#     return max_num, min_num

# def find_min_max_2(a):
#     digits = [int(digit) for digit in str(a)]
#     max_num = int("".join(map(str, sorted(digits, reverse=True))))
#     min_num = int("".join(map(str, sorted(digits))))
#     return max_num, min_num
# """, None, 1)

# insert_question("Q256","Information technology (IT)","Python programming", """
# Write a program that gets a list of integers and an target number and...:
# 1- find a pair(2 element tuple) from the list that their sum be equal to the target number
# 2- find a triple(3 element tuple) from the list that their sum be equal to the target number
# Note: sample input and outputs are provided in the attachment image.
# """, "..\images\Q256.png", "Normal", "Descriptive/Practical", 20, "fpeck")
# insert_question_option("Q256O1","Q256","""
# from itertools import combinations
# def find_pair(lst, target):
#     seen = set()
#     for num in lst:
#         complement = target - num
#         if complement in lst:
#             return(num, complement)
#         seen.add(num)
#     return None

# def find_triple(lst, target):
#     for triple in combinations(lst, 3):
#         if sum(triple) == target:
#             return triple
#     return None
# """, None, 1)

# insert_question("Q257","Information technology (IT)","Python programming", """
# Write a program that gets a columns, rows and sign of outer and inner rectangles and embed the inner rectangle at the center of the outer rectangle. 
# Note1: If it is impossioble to put it at the center, prints impossible.
# Note2: sample input and outputs are provided in the attachment image.
# """, "..\images\Q257.png", "Normal", "Descriptive/Practical", 10, "haledonald")
# insert_question_option("Q257O1","Q257","""
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None, 1)

# insert_question("Q258","Information technology (IT)","Python programming", """
# Write a program that gets a sentence from the user and print only the words with odd number of characters if the number of words in the sentence is even 
# else prints only the words with even number of characters.
# Note: sample input and outputs are provided in the attachment image.
# """, "..\images\Q258.png", "Easy", "Descriptive/Practical", 5, "haledonald")
# insert_question_option("Q258O1","Q258","""
# words=input("Enter a sentence: ").strip().split(" ")
# mode = "odd" if len(words) %2 != 0 else "even"
# if mode == "odd":
#     result = " ".join([word for word in words if len(word) %2 == 0])   
# else:
#     result = " ".join([word for word in words if len(word) %2 != 0])

# print(result)
# """, None, 1)

# insert_question("Q259","Information technology (IT)","Python programming", """
# Write a program that gets a text in lowercase from the user and prints the sum of ascii codes corresponding to characters that 
# are in the same index as they apear in the alphabet.
# Note: sample input and outputs are provided in the attachment image.            
# """, "..\images\Q259.png", "Normal", "Descriptive/Practical", 10, "hannahconner")
# insert_question_option("Q259O1","Q259","""
# alph_dict = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9,
#              'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 
#              'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}
# string = input("Enter a string: ").strip().lower()
# sum = 0

# for idx, chr in enumerate(string):
#     if idx == alph_dict.get(chr):
#         sum += ord(chr)

# print(sum)
# """, None, 1)

# insert_question("Q260","Information technology (IT)","Python programming", """
# Write a prigram that gets a datetime and convert it to the Excel time serial that is the seconds passed from the 1899-12-30.
# Note: sample input and outputs are provided in the attachment image.  
# """, "..\images\Q260.png", "Easy", "Descriptive/Practical", 5, "hannahconner")
# insert_question_option("Q260O1","Q260","""
# from datetime import datetime
 
# def excel_serial_num(datetime1):
 
#     # Initializing a reference date
#     # Note that here date is not 31st Dec but 30th!
#     base_date = datetime(1899, 12, 30)
#     delta = datetime1 - base_date
#     return float(delta.days) + (float(delta.seconds) / 86400)
# """, None, 1)

# insert_question("Q261","Information technology (IT)","Python programming", """
# Write a program that gets a date range (two dates) and an positive integer N, then divides the rage into N subrages and prints the result.
# Note: sample input and outputs are provided in the attachment image.  
# """, "..\images\Q261.png", "Normal", "Descriptive/Practical", 10, "jknight")
# insert_question_option("Q261O1","Q261","""
# from datetime import datetime, timedelta

# def divide_range(date_start, date_end, n):
#     # ca;c equal delta for subranges
#     equal_delta = (date_end - date_start) / n
#     # initialize subranges start
#     range_start = date_start

#     for i in range(n):
#         print(f"{range_start.date()} - {(range_start + timedelta(equal_delta.days)).date()}")
#         range_start = range_start + timedelta(equal_delta.days)
# """, None, 1)

# insert_question("Q262","Information technology (IT)","Python programming", """
# Write a program that gets an email address from the usera and validates it.
# Hint: An email address consists of two parts, a local-part (sometimes a user name, but not always) and a domain
# The format of an email address is local-part@domain, where the local-part may be up to 64 octets long and the domain may have a maximum of 255 octets
# Local-part
#     - The local-part of the email address may be unquoted or may be enclosed in quotation marks.
#     - If unquoted, it may use any of these ASCII characters:
#     - uppercase and lowercase Latin letters A to Z and a to z
#     - digits 0 to 9
#     - printable characters !#$%&'*+-/=?^_`{|}~
#     - dot ., provided that it is not the first or last character and provided also that it does not appear consecutively (e.g., John..Doe@example.com is not allowed)
#     - The maximum total length of the local-part of an email address is 64 octets.[8]
#     - Space and special characters "(),:;<>@[\] are allowed with restrictions (they are only allowed inside a quoted string, as described in the paragraph below, and in that quoted string, any backslash or double-quote must be preceded once by a backslash);
#     - Comments are allowed with parentheses at either end of the local-part; e.g., john.smith(comment)@example.com and (comment)john.smith@example.com are both equivalent to john.smith@example.com.                
# Domain
# The domain name part of an email address has to conform to strict guidelines: it must match the requirements for a hostname, a list of dot-separated DNS labels, each label being limited to a length of 63 characters and consisting of:[7]: §2 

#     - Uppercase and lowercase Latin letters A to Z and a to z;
#     - Digits 0 to 9, provided that top-level domain names are not all-numeric;
#     - Hyphen -, provided that it is not the first or last character.
#     This rule is known as the LDH rule (letters, digits, hyphen)
# Note: sample input and outputs are provided in the attachment image.  
# """, "..\images\Q262.png", "Hard", "Descriptive/Practical", 15, "jknight")
# insert_question_option("Q262O1","Q262","""
# import re
# def is_email(text):  
#     pattern_match = re.search(r"^([a-z0-9\._+&%#-]+)@([0-9a-z\.-]+)\.([a-z]{2,6})$", text, re.IGNORECASE)
#     consec_dots_match = re.search(r"^([a-z0-9\._+@&%#-]*)(\.{2})([a-z0-9\._+@&%#-]*)$", text, re.IGNORECASE)
#     init_dot_match = re.search(r"^\.([a-z0-9\._+@&%#-]*)$", text, re.IGNORECASE)
#     mid_dot_left_match = re.search(r"^([a-z0-9\._+&%#-]+)\.@([a-z0-9\.-]+)$", text, re.IGNORECASE)
#     mid_dot_right_match = re.search(r"^([a-z0-9\._+&%#-]+)@\.([a-z0-9\.-]+)$", text, re.IGNORECASE)

#     if pattern_match and not consec_dots_match and not init_dot_match  \
#                     and not mid_dot_left_match and not mid_dot_right_match:
#         #print(match.groups())
#         return True
#     return False
# """, None, 1)

# insert_question("Q263","Information technology (IT)","Python programming", """
# Write a program that gets a URL from the usera and validates it.
# Hint: An URL has the following requirements:
#     - The string should start with either http or https followed by ://.
#     - The combined length of the sub-domain and root domain must be between 2 and 256. It should only contain alphanumeric characters and/or special characters.
#     - The TLD (Top-Level Domain) should only contain alphabetic characters and it should be between two and six characters long.
#     - The end of the URL string could contain alphanumeric characters and/or special characters. And it could repeat zero or more times.
# Note: sample input and outputs are provided in the attachment image.  
# """, "..\images\Q263.png", "Normal", "Descriptive/Practical", 10, "jsaunders")
# insert_question_option("Q263O1","Q263","""
# import re
# def is_url(text):  
#     if match := re.search(r"^(https?:\/\/)?(www\.)?([\/\(\[\\\)\]a-zA-Z0-9@%_\+\.~#\?&\$=:;-]{2,256})(\.[a-z]{2,6}|:[0-9]{3,4})\b([\/\(\[\\\)\]a-zA-Z0-9@%_\+\.~#\?&\$\\=:;-]*)$", text):
#         #print(match.groups())
#         return True
#     return False
# """, None, 1)

# insert_question("Q264","Information technology (IT)","Python programming", """
# Write a program that gets a directory and some file extentions and list all of the files with those extentions in that directory.
# """, None, "Easy", "Descriptive/Practical", 5, "jsaunders")
# insert_question_option("Q264O1","Q264","""
# import os

# def files_with_exts(dir,*exts):
#     # iterating over all files
#     for file in os.listdir(dir):
#         if file.endswith(exts):
#             # printing file name of desired extension
#             print(file) 
# Note: there are many other ways such as scandir(), walk(),... that work well too.
# """, None, 1)

# insert_question("Q265","Information technology (IT)","Python programming", """
# Write a program that gets a directory from the user and list all fo the directories and files in it descendingly by size. 
# """, None, "Hard", "Descriptive/Practical", 20, "navarromark")
# insert_question_option("Q265O1","Q265","""
# def files_with_sizes_sorted(dir): 
#     # os.walk(dir) get the path (p), sub_directory (sub_dir), and filename (files) from the given path
#     p, sub_dir, files = list(os.walk(dir))[0]
          
#     # Create a list of files in directory along with the size
#     size_of_file = [(file,os.stat(os.path.join(dir, file)).st_size) for file in files]
    
#     # get the size of the sub_dir of the given path
#     for sub in sub_dir:
#         i = os.path.join(dir,sub)
#         size = 0
#         for k in os.listdir(i):
#             size += os.stat(os.path.join(i,k)).st_size
#         size_of_file.append((sub,size))
    
#     # in this case we have use its file paths.
#     for file, size in sorted(size_of_file, key = lambda x : x[1], reverse = True):
#         print(f"{os.path.join(dir,file)} : {round(size/(1024*1024),3)}MB")
# Note: there are many other ways such as listdir(),... that work too.
# """, None, 1)

# insert_question("Q266","Information technology (IT)","Python programming", """
# Write a program that gets a text file path and print it's stats such as count of lines, words, spaces, alphabets, numbers, special characters.
# """, None, "Hard", "Descriptive/Practical", 30, "navarromark")
# insert_question_option("Q266O1","Q266","""
# def count_alphs(string:str):
#     res = ""
#     for chr in string:
#         if chr.isalpha():
#             res += chr
#     return len(res)

# def count_words(string:str):
#     return len([x for x in string.split(" ") if x.isalpha])

# def count_digits(string:str):
#     res = ""
#     for chr in string:
#         if chr.isdigit():
#             res += chr
#     return len(res)

# def count_spaces(string:str):
#     res = ""
#     for chr in string:
#         if chr.isspace():
#             res += chr
#     return len(res)

# def count_symbols(string:str):
#     res = ""
#     for chr in string:
#         if chr in "{}()[].,:;+-*/&|<>=~\'\"\\^%$@!?":
#             res += chr
#     return len(res)

# def file_stats(file_name):
#     with open(file_name) as file:
#         lines = file.readlines()
#         return {"lines":len(lines),
#                 "words":sum(count_words(line) for line in lines),
#                 "characters":sum(len(line) for line in lines),
#                 "letters":sum(count_alphs(line) for line in lines),
#                 "digits":sum(count_digits(line) for line in lines),
#                 "symbols":sum(count_symbols(line) for line in lines),
#                 "spaces":sum(count_spaces(line) for line in lines)}
# """, None, 1)

# insert_question("Q267","Information technology (IT)","Python programming", """
# Write a program that gets a file path and determine its access levels(read, write, execute).
# """, None, "Easy", "Descriptive/Practical", 5, "phelpsashley")
# insert_question_option("Q267O1","Q267","""
# import os
# dir = "G:\Vscode_Python_Projs\Question_Bank\\regex.py"
# print('Exist:', os.access(dir, os.F_OK))
# print('Readable:', os.access(dir, os.R_OK))
# print('Writable:', os.access(dir, os.W_OK))
# print('Executable:', os.access(dir, os.X_OK))
# """, None, 1)

# insert_question("Q268","Information technology (IT)","Python programming", """
# One way to measure the complexity of a program is to count its number of lines of code (LOC), excluding blank lines and comments.
# For instance, a program like

# # Say hello

# name = input("What's your name? ")
# print(f"hello, {name}")
# has just two lines of code, not four, since its first line is a comment, and its second line is blank (i.e., just whitespace). 
# That’s not that many, so odds are the program isn’t that complex. Of course, just because a program (or even function) has more lines of code than another doesn’t necessarily mean it’s more complex. 
# For instance, a function like

# def is_even(n):
#     if n % 2 == 0:
#         return True
#     else:
#         return False
# isn’t really twice as complex as a function like

# def is_even(n):
#     return n % 2 == 0
# even though the former has (more than) twice as many lines of code. In fact, the former might arguably be simpler if it’s easier to read! So lines of code should be taken with a grain of salt.

# Even so, in a file called lines.py, implement a program that expects exactly one command-line argument, the name (or path) of a Python file, and outputs the number of lines of code in that file, excluding comments and blank lines. If the user does not specify exactly one command-line argument, or if the specified file’s name does not end in .py, or if the specified file does not exist, the program should instead exit via sys.exit.
# Assume that any line that starts with #, optionally preceded by whitespace, is a comment. (A docstring should not be considered a comment.) Assume that any line that only contains whitespace is blank.
# Note: sample input and outputs are provided in the attachment image.  
# """, "..\images\Q268.png", "Hard", "Descriptive/Practical", 20, "phelpsashley")
# insert_question_option("Q268O1","Q268","""
# import sys

# def main():
#     if len(sys.argv) < 2:
#         sys.exit("Too few command-line arguments")
#     elif len(sys.argv) > 2:
#         sys.exit("Too many command-line arguments")
#     else:
#         if sys.argv[1][-3:] != ".py":
#             sys.exit("Not a python file")
#         else:
#             print(count_lines(sys.argv[1]))

# def count_lines(file):
#     try:
#         counter = 0
#         with open(file, "r") as f:
#             for line in f:
#                 if not (line.lstrip().startswith("#") or line.strip() == ""):
#                     counter = counter + 1
#             return counter
#     except FileNotFoundError:
#         sys.exit("File does not exist")

# if __name__ == "__main__":
#     main()
# """, None, 1)

# insert_question("Q269","Information technology (IT)","Python programming", """
# Implement a Shape class with name and color attributes that classes Rectangle, Circle, Triangle inherit from it and have methods for calculating primeter and area.
# """, None, "Normal", "Descriptive/Practical", 20, "phelpsashley")
# insert_question_option("Q269O1","Q269",'''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None, 1)

# insert_question("Q270","Information technology (IT)","Python programming", """
# Implement a Calculator class that supports methods for mathemetical operations +-*/^ and mod
# Note: the calculator must be turned on to operate.  
# """, None, "Easy", "Descriptive/Practical", 5, "phelpsashley")
# insert_question_option("Q270O1","Q270","""
# class Calculator():
#     def __init__(self):
#         self.on = False
#         self.display = None

#     def turn_on(self):
#         self.on = True
#         self.display = 0
    
#     def turn_off(self):
#         self.on = False
#         self.display = None
    
#     def calc(self, a, op, b):
#         if not isinstance(a,(int, float)) or not isinstance(b,(int, float)):
#             print("Invalid inputs!")
#             return
#         elif op not in ["+","-","*","/","**","%"]:
#             print("Invalid/unsupported operation!")
#             return
#         elif not self.on:
#             print("Calculator is OFF, trun it ON and try again!")
#             return
#         else:
#             match op:
#                 case "+":
#                     res = a + b
#                     self.display = res
#                     return res
#                 case "-":
#                     res = a - b
#                     self.display = res
#                     return res
#                 case "*":
#                     res = a * b
#                     self.display = res
#                     return res
#                 case "/":
#                     res = a / b
#                     self.display = res
#                     return res
#                 case "**":
#                     res = a ** b
#                     self.display = res
#                     return res
#                 case "mod":
#                     res = a % b
#                     self.display = res
#                     return res

#     def __str__(self):
#         return "A calculator capable of calcualting + - * / ** %"
# """, None, 1)

# insert_question("Q271","Information technology (IT)","Python programming", """
# Write a function that gets a string and checks if the parentheses in it are balanced.
# Hint: consider some samples:
# is_balanced("({a+b})")     --> True
# is_balanced("))((a+b}{")   --> False
# is_balanced("((a+b))")     --> True
# is_balanced("))")          --> False
# is_balanced("[a+b]*(x+2y)*{gg+kk}") --> True 
# """, None, "Hard", "Descriptive/Practical", 25, "chris89")
# insert_question_option("Q271O1","Q271","""
# from collections import deque

# class Stack:
#     def __init__(self):
#         self.container = deque()
    
#     def push(self,val):
#         self.container.append(val)
        
#     def pop(self):
#         return self.container.pop()
    
#     def peek(self):
#         return self.container[-1]
    
#     def is_empty(self):
#         return len(self.container)==0
    
#     def size(self):
#         return len(self.container)

# def is_match(ch1, ch2):
#     match_dict = {
#         ')': '(',
#         ']': '[',
#         '}': '{'
#     }
#     return match_dict[ch1] == ch2

# def is_balanced(s):
#     stack = Stack()
#     for ch in s:
#         if ch=='(' or ch=='{' or ch == '[':
#             stack.push(ch)
#         if ch==')' or ch=='}' or ch == ']':
#             if stack.size()==0:
#                 return False
#             if not is_match(ch,stack.pop()):
#                 return False
#     return stack.size()==0
# """, None, 1)

# insert_question("Q272","Information technology (IT)","Python programming", """
# Create a GUI for a temperature conversion application that the user be able to select a temperature scale from the radio buttons Kelvin-Celsius-Fahrenheit 
# and buy clicking on Convert button the corresponding values in other scales be shown, and if the user wants to convert agail there be a reset button.
# Note: the sample application image is attached, don't forget to check that up.
# """, "..\images\Q272.png", "Hard", "Descriptive/Practical", 40, "christinalee")
# insert_question_option("Q272O1","Q271","""
# import tkinter as tk
# from tkinter import messagebox

# class TemperatureConverter:
#     def __init__(self, root):
#         self.root = root
#         self.root.title("Temperature Converter")

#         # Initialize variables
#         self.scale_var = tk.StringVar(value="Celsius")
#         self.temperature_var = tk.DoubleVar(value=0.0)
#         self.converted_temperatures_var_var = {"Celsius": tk.StringVar(), "Fahrenheit": tk.StringVar(), "Kelvin": tk.StringVar()}

#         # Create widgets
#         self.create_widgets()

#     def create_widgets(self):
#         # Temperature Scale Selection
#         scale_frame = tk.Frame(self.root)
#         scale_frame.grid(row=0, column=0, sticky="w", padx=10, pady=5)
#         scales = ["Celsius", "Fahrenheit", "Kelvin"]
#         for idx, scale in enumerate(scales):
#             rb = tk.Radiobutton(scale_frame, text=scale, variable=self.scale_var, val-ue=scale)
#             rb.grid(row=0, column=idx, padx=(0, 10))

#         # Temperature Input
#         input_frame = tk.Frame(self.root)
#         input_frame.grid(row=1, column=0, sticky="w", padx=10, pady=5)
#         input_label = tk.Label(input_frame, text="Temperature:")
#         input_label.grid(row=0, column=0)
#         input_entry = tk.Entry(input_frame, textvariable=self.temperature_var, width=10)
#         input_entry.grid(row=0, column=1)
#         input_entry.focus()

#         # Convert Button
#         convert_button = tk.Button(self.root, text="Convert", com-mand=self.convert_temperature)
#         convert_button.grid(row=1, column=1, pady=5)

#         # Converted Temperatures Display
#         output_frame = tk.Frame(self.root)
#         output_frame.grid(row=2, column=0, columnspan=2, padx=10, pady=(0, 10))
#         for idx, scale in enumerate(scales):
#             label = tk.Label(output_frame, text=scale)
#             label.grid(row=0, column=idx, padx=(0, 10))
#             converted_label = tk.Label(output_frame, textvaria-ble=self.converted_temperatures_var_var[scale])
#             converted_label.grid(row=1, column=idx)

#         # Clear Button
#         clear_button = tk.Button(self.root, text="Clear", command=self.clear_fields)
#         clear_button.grid(row=3, column=0, columnspan=2, pady=(0, 10))

#     def convert_temperature(self):
#         try:
#             temperature = self.temperature_var.get()
#             scale = self.scale_var.get()

#             if scale == "Celsius":
#                 celsius = temperature
#                 fahrenheit = (celsius * 9/5) + 32
#                 kelvin = celsius + 273.15
#             elif scale == "Fahrenheit":
#                 fahrenheit = temperature
#                 celsius = (fahrenheit - 32) * 5/9
#                 kelvin = (fahrenheit + 459.67) * 5/9
#             elif scale == "Kelvin":
#                 kelvin = temperature
#                 celsius = kelvin - 273.15
#                 fahrenheit = (kelvin * 9/5) - 459.67

#             # Update converted temperatures
#             self.converted_temperatures_var_var["Celsius"].set(f"{celsius:.2f} °C")
#             self.converted_temperatures_var_var["Fahrenheit"].set(f"{fahrenheit:.2f} °F")
#             self.converted_temperatures_var_var["Kelvin"].set(f"{kelvin:.2f} K")

#         except (ValueError,tk.TclError):
#             messagebox.showerror("Error", "Invalid input. Please enter a valid number.")
#             self.clear_fields()

#     def clear_fields(self):
#         self.temperature_var.set(0.0)
#         for scale in self.converted_temperatures_var_var.values():
#             scale.set("")

# if __name__ == "__main__":
#     root = tk.Tk()
#     app = TemperatureConverter(root)
#     root.mainloop()
# """, None, 1)

# insert_question("Q273","Information technology (IT)","Python programming", """
# Create a GUI for a calculator application with the layout shown in the attachment file.
# """, "..\images\Q273.png", "Normal", "Descriptive/Practical", 50, "ezhang")
# insert_question_option("Q273O1","Q273","""
# import tkinter as tk
# from tkinter import messagebox
# import math

# class CalculatorApp:
#     def __init__(self, master):
#         self.master = master
#         master.title("Calculator")
#         master.geometry("300x400")
#         master.configure(bg='gray')  # Using the color name 'gray' for the background

#         self.entry = tk.Entry(master, font=('Arial', 20), bd=5, relief=tk.FLAT, justi-fy=tk.RIGHT)
#         self.entry.grid(row=0, column=0, columnspan=6, sticky="ew")
#         self.entry.focus_set()

#         buttons = [
#             ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3), ('%', 1, 4), ('C', 1, 5),
#             ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3), ('1/x', 2, 4), ('del', 2, 5),
#             ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3), ('sqrt', 3, 4), ('exp', 3, 5),
#             ('0', 4, 0), ('.', 4, 1), ('=', 4, 2), ('+', 4, 3), ('pi', 4, 4), ('e', 4, 5),
#             ('sin', 5, 0), ('cos', 5, 1), ('tan', 5, 2), ('ln', 5, 3), ('(', 5, 4), (')', 5, 5)
#         ]

#         for (text, row, column) in buttons:
#             button = tk.Button(master, text=text, font=('Arial', 18), bg='light gray', bd=5, relief=tk.RAISED,
#                                command=lambda t=text: self.on_button_click(t))
#             button.grid(row=row, column=column, sticky="nsew", padx=2, pady=2)
#             master.grid_columnconfigure(column, weight=1)

#         for i in range(6):
#             master.grid_rowconfigure(i, weight=1)

#         master.bind("<Return>", lambda event: self.on_button_click('='))
#         master.bind("<BackSpace>", lambda event: self.entry.delete(len(self.entry.get()) - 1))
#         master.bind("<Escape>", lambda event: self.entry.delete(0, tk.END))

#     def on_button_click(self, text):
#         if text == '=':
#             try:
#                 result = eval(self.entry.get())
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except Exception as e:
#                 messagebox.showerror("Error", "Invalid input")
#         elif text == 'sqrt':
#             try:
#                 number = float(self.entry.get())
#                 result = math.sqrt(number)
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for sqrt")
#             except Exception as e:
#                 messagebox.showerror("Error", str(e))
#         elif text == '1/x':
#             try:
#                 number = float(self.entry.get())
#                 result = 1 / number
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for 1/x")
#             except ZeroDivisionError:
#                 messagebox.showerror("Error", "Division by zero")
#             except Exception as e:
#                 messagebox.showerror("Error", str(e))
#         elif text == 'pi':
#             self.entry.insert(tk.END, str(math.pi))
#         elif text == 'e':
#             self.entry.insert(tk.END, str(math.e))
#         elif text == 'sin':
#             try:
#                 angle = float(self.entry.get())
#                 result = math.sin(math.radians(angle))
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for sin")
#         elif text == 'cos':
#             try:
#                 angle = float(self.entry.get())
#                 result = math.cos(math.radians(angle))
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for cos")
#         elif text == 'tan':
#             try:
#                 angle = float(self.entry.get())
#                 result = math.tan(math.radians(angle))
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for tan")
#         elif text == 'ln':
#             try:
#                 number = float(self.entry.get())
#                 result = math.log(number)
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for ln")
#             except Exception as e:
#                 messagebox.showerror("Error", str(e))
#         elif text == 'exp':
#             try:
#                 number = float(self.entry.get())
#                 result = math.exp(number)
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except ValueError:
#                 messagebox.showerror("Error", "Invalid input for exp")
#             except Exception as e:
#                 messagebox.showerror("Error", str(e))
#         elif text == '%':
#             try:
#                 expression = self.entry.get()
#                 result = eval(expression) / 100
#                 self.entry.delete(0, tk.END)
#                 self.entry.insert(tk.END, str(result))
#             except Exception as e:
#                 messagebox.showerror("Error", "Invalid input for %")
#         elif text == 'del':
#             current_text = self.entry.get()[:-1]
#             self.entry.delete(0, tk.END)
#             self.entry.insert(tk.END, current_text)
#         elif text == 'C':
#             self.entry.delete(0, tk.END)
#         else:
#             self.entry.insert(tk.END, text)

# if __name__ == "__main__":
#     root = tk.Tk()
#     app = CalculatorApp(root)
#     root.mainloop()
# """, None, 1)

# insert_question("Q274","Information technology (IT)","Python programming", """
# Write a function to test that a number is undulting or not.
# Hint: An undulating number is a number that has the digit form ABABAB... when in the base 10 number system. 
# It is sometimes restricted to non-trivial undulating numbers which are required to have at least three digits and A ≠ B. 
# Some larger undulating numbers are: 1010, 80808, 171717, 989898989.
# """, None, "Normal", "Descriptive/Practical", 10, "fpeck")
# insert_question_option("Q274O1","Q274","""
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None, 1)

# insert_question("Q275","Information technology (IT)","Python programming", """
# Write a program that gets a positive integer N from the user and generates first terms of the derangements/subfactorials sequence less than or equal N.
# Hint: The number of derangements of a set of size n is known as the subfactorial of n or the n-th derangement number or n-th de Montmort number (after Pierre Remond de Montmort). 
# Notations for subfactorials in common use include !n, Dn, dn, or n¡
# Note1: Don't forget to chech the additional info about subfactorials at the attachment.
# Note2: Find the most optimum solution, with the least time-space complexity.
# """, "..\images\Q275.png", "Hard", "Descriptive/Practical", 15, "haledonald")
# insert_question_option("Q275O1","Q275","""
# def subf(n, memo={}):
#     if n == 0:
#         return 1
#     if n == 1:
#         return 0
#     if n in memo:
#         return memo[n]
#     memo[n] = (n-1) * (subf(n-1, memo) + subf(n-2, memo))
#     return memo[n]

# n = int(input("Enter N: "))
# i = 0
# while subf(i) <= n:
#     print(subf(i), end = " ")
#     i += 1
# """, None, 1)

# insert_question("Q276","Information technology (IT)","Python programming", """
# Consider the attachment pattern image and write a program that gets n from the user and print the window pattern.
# """, "..\images\Q276.png", "Normal", "Descriptive/Practical", 15, "hannahconner")
# insert_question_option("Q276O1","Q276","""
# n=int(input("Enter n: "))

# if n < 5:
#     print("Imposiible!")

# else:
#     if n % 2 != 0:
#         # if n is odd then we will have only one middle element
#         c = ( n // 2 ) + 1
#         d = 0 
#     else:
#         # if n is even then we will have two values
#         c = ( n // 2 ) + 1
#         d = ( n // 2 )

#     for i in range( 1 , n + 1 ):
#         for j in range( 1 , n + 1 ):
#             # if i,j equals to corner row or column then "*"
#             if i == 1 or j == 1 or i == n or j == n:
#                 print("*",end=" ")     
#             else: 
#                 # if i,j equals to the middle row or column then  "*"
#                 if i == c or j == c:
#                     print("*",end=" ") 
#                 elif i == d or j == d:
#                     print("*",end=" ")
#                 else:
#                     print(" ",end=" ")
#         print()
# """, None, 1)

# insert_question("Q277","Information technology (IT)","Python programming", """
# Consider the attachment pattern image and write a program that gets n from the user and print the Gnomon pattern.
# """, "..\images\Q277.png", "Normal", "Descriptive/Practical", 10, "jknight")
# insert_question_option("Q277O1","Q277","""
# n=int(input("Enter n: "))

# for i in range(1,n+1):
#     for j in range(1,n+1):
#         print(f"{max(i,j)} ", end = " ")
#     print()
# """, None, 1)

# insert_question("Q278","Information technology (IT)","Python programming", """
# Write functions to get a string and test if it is Heterogram/Isogram.
# Hint1: A heterogram (from hetero-, meaning 'different', + -gram, meaning 'written') is a word, phrase, or sentence in which no letter of the alphabet occurs more than once. 
#     The terms isogram and nonpattern word have also been used to mean the same thing. Example: Blocky dwarf zings the jump
# """, None, "Normal", "Descriptive/Practical", 10, "jsaunders")
# insert_question_option("Q278O1","Q278","""
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in “!\”#$%&\’()*+,-./:;?@[\]^_`{|}~”:
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None, 1)

# insert_question("Q279","Information technology (IT)","Python programming", """
# Write functions to get a string and test if it is Tautogram
# Hint: A tautogram (Greek: tauto gramma, "same letter") is a text in which all words start with the same letter. Historically, tautograms were mostly poetical forms.
#     Example: Truly they triumph, trumpeting trills to trounce the terrible travesties.
# """, None, "Normal", "Descriptive/Practical", 10, "navarromark")
# insert_question_option("Q279O1","Q279","""
# def is_tautogram(s: str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~":
#             s = s.replace(chr,"")

#     words = s.split(" ")
#     return all([True if word[0] == words[0][0] else False for word in words])
# """, None, 1)

# insert_question("Q280","Information technology (IT)","Python programming", """
# Write functions to get a string and test if it is Pangram/Holoalphabetic.
# Hint: A pangram or holoalphabetic sentence is a sentence using every letter of a given alphabet at least once. 
#     Pangrams have been used to display typefaces, test equipment, and develop skills in handwriting, calligraphy, and typing.
# example: The quick brown fox jumps over the lazy dog
# """, None, "Normal", "Descriptive/Practical", 10, "hannahconner")
# insert_question_option("Q280O1","Q280","""
# def is_pangram(s: str):
#     s = s.strip().lower()
#     # remove any non alpha chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~ 0123456789":
#             s = s.replace(chr,"")

#     return len(set(s)) == 26
# """, None, 1)

# insert_question("Q281","Information technology (IT)","Python programming", """
# Write functions to get a string and test if it is Anagram/Anadrom.
# Hint: An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
# For example, the word anagram itself can be rearranged into nag a ram; which is an Easter egg in Google when searching for the word "anagram"
# some other examples:
#     - "New York Times" = "monkeys write"
#     - "Church of Scientology" = "rich-chosen goofy cult"
# """, None, "Hard", "Descriptive/Practical", 15, "chris89")
# insert_question_option("Q281O1","Q281","""
# from itertools import permutations
# def are_anagram(s1,s2):
#     s1 = s1.strip().lower()
#     s2 = s2.strip().lower()
#     # remove any non alpha chaaracters
#     for chr in s1:
#         if chr in "!\"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~ 0123456789":
#             s1 = s1.replace(chr,"")
#     for chr in s2:
#         if chr in "!\"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~ 0123456789":
#             s2 = s2.replace(chr,"")
#     perms = ["".join(perm) for perm in list(permutations(s1))]
#     return s2 in perms
# """, None, 1)

# insert_question("Q282","Information technology (IT)","Python programming", """
# Write a program that gets a year number and prints its calender in 3 columns like the sample attached image for 2018.
# """, "..\images\Q282.png", "Normal", "Descriptive/Practical", 10, "christinalee")
# insert_question_option("Q282O1","Q282","""
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None, 1)

# insert_question("Q283","Information technology (IT)","Python programming", """
# Write a function that gets two dates and an integer N then return N random dated in that range.
# """, None, "Normal", "Descriptive/Practical", 10, "ezhang")
# insert_question_option("Q283O1","Q283","""
# from datetime import date, timedelta
# from random import choices

# def random_dates_between(start_date, end_date, num):
#     # generate days between 2 dates
#     dates = [start_date + timedelta(days=i) for i in range((end_date - start_date).days)]  
#     # pick K random dates from pack
#     return choices(dates, k=num)
# """, None, 1)

# insert_question("Q284","Information technology (IT)","Python programming", """
# Write a function that gets a file path and return the last date and time its modified.
# """, None, "Normal", "Descriptive/Practical", 10, "fpeck")
# insert_question_option("Q284O1","Q284","""
# import os
# from datetime import datetime
# from time import localtime
                       
# def last_modified_fileinfo(filepath):
#     # get file stats
#     date = localtime(os.stat(filepath).st_mtime)
#     # Extract year, month and day from the date
#     # year = date[0], month = date[1], day = date[2], hour = date[3], minute = date[4], second = date[5]

#     return datetime(date[0], date[1], date[2], date[3], date[4], date[5])
# """, None, 1)

# insert_question("Q285","Information technology (IT)","Python programming", """
# Write a function that validate an IPv4 address.
# Hint: An Internet Protocol address (IP address) is a numerical label such as 192.0.2.1 that is assigned to a device connected to a computer network that uses the Internet Protocol for communication.
# IP addresses serve two main functions: network interface identification, and location addressing
# An IPv4 address has a size of 32 bits, which limits the address space to 4294967296 (232) addresses. 
# Of this number, some addresses are reserved for special purposes such as private networks (~18 million addresses) and multicast addressing (~270 million addresses).
# IPv4 addresses are usually represented in dot-decimal notation, consisting of four decimal numbers, each ranging from 0 to 255, separated by dots, e.g., 192.0.2.1. Each part represents a group of 8 bits (an octet) of the address
# Note: Don't forget to check the sample inputs and outputs in the attachment image.
# """, "..\images\Q285.png", "Normal", "Descriptive/Practical", 15, "haledonald")
# insert_question_option("Q285O1","Q285","""
# import re
# def is_ipv4(text):  
#     if match := re.search(r"^([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$", text):
#         #print(match.groups())
#         return True
#     return False
# """, None, 1)

# insert_question("Q286","Information technology (IT)","Python programming", """
# Write a function that validate an IPv4 address.
# Hint: An Internet Protocol address (IP address) is a numerical label such as 192.0.2.1 or 2510:cc:8000:1c82:543c:cd2e:f2fa:5a8b that is assigned to a device connected to a computer network that uses the Internet Protocol for communication.
# IP addresses serve two main functions: network interface identification, and location addressing
# In IPv6, the address size was increased from 32 bits in IPv4 to 128 bits, thus providing up to 2128 (approximately 3.403×1038) addresses. This is deemed sufficient for the foreseeable future.                
# """, "..\images\Q286.png", "Hard", "Descriptive/Practical", 25, "hannahconner")
# insert_question_option("Q286O1","Q286","""
# import re
# def is_ipv6(text):  
#     if match := re.search(r"^([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3}):([0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[a-f]{1,4}|[1-9][0-9a-f]{1,3}|[a-f][0-9a-f]{1,3})$", text, re.IGNORECASE):
#         #print(match.groups())
#         return True
#     return False
# """, None, 1)

# insert_question("Q287","Information technology (IT)","Python programming", """
# Create a CSV file name mydata1.csv like the attachment image manually, then write a program that sorts the file based on the score descendingly.
# """, "..\images\Q287.png", "Normal", "Descriptive/Practical", 10, "jknight")
# insert_question_option("Q287O1","Q287","""
# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None, 1)

# insert_question("Q288","Information technology (IT)","Python programming", """
# Write a program that gets a list of lists (students data) and save it to two files named students_data1.csv and students_data2.csv 
# with the delimiter | and at students_data1.csv quotes all values and at students_data2.csv quotes only non-numeric values.
# rows = [
#     ['Nikhil', 'COE', 2, 9.0],
#     ['Sanchit', 'COE', 2, 9.1],
#     ['Aditya', 'IT', 2, 9.3],
#     ['Sagar', 'SE', 1, 9.5],
#     ['Prateek', 'MCE', 3, 7.8],
#     ['Sahil', 'EP', 2, 9.1]
# ]
# """, None, "Normal", "Descriptive/Practical", 10, "jsaunders")
# insert_question_option("Q288O1","Q288","""
# import csv

# with open('students_data1.csv', 'w', newline='') as f:
#     w = csv.writer(f, quoting=csv.QUOTE_ALL, delimiter="|")
#     w.writerows(rows)
# with open('students_data2.csv', 'w', newline='') as f:
#     w = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC, delimiter="|")
#     w.writerows(rows)
# """, None, 1)

# insert_question("Q289","Information technology (IT)","Python programming", """
# Create a CSV file name students.csv like the attachment image manually, then Write a program that remove the Age column and inserts a Gender column with the default value Male at the end of its columns.
# """, "..\images\Q289.png", "Normal", "Descriptive/Practical", 10, "navarromark")
# insert_question_option("Q289O1","Q289","""
# from csv import reader, writer

# with open("students.csv") as f:
#     r = list(reader(f))

# new_rows = [[row[0],row[1],row[2],row[3],row[5],"Gender"] if idx==0 else [row[0],row[1],row[2],row[3],row[5],"Male"] 
#             for idx,row in enumerate(r)]
# with open("students.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows(new_rows)
# """, None, 1)

# insert_question("Q290","Information technology (IT)","Python programming", """
# Write a program that gets the following list and convert it to a Output.xml file with the structure specified in the attachment image.
# users_list = ["GeeksForGeeks", "Arka", "Computer Science", "Engineering", "Portal"]
# """, "..\images\Q290.png", "Hard", "Descriptive/Practical", 20, "phelpsashley")
# insert_question_option("Q290O1","Q290","""
# from xml.dom import minidom 
 
# # create doc variable
# doc = minidom.Document() 
 
# # create root element
# root = doc.createElement('root') 
# doc.appendChild(root) 
 
# for user in range(len(users_list)):
#     # create child element
#     child = doc.createElement('usr')
#     # insert user data into element
#     child.setAttribute('list', users_list[user]) 
#     root.appendChild(child) 
 
# xml_str = doc.toprettyxml(indent ="\t") 
 
# # save file
# with open("Output.xml", "w") as f: 
#     f.write(xml_str) 
# """, None, 1)

# insert_question("Q291","Information technology (IT)","Python programming", """
# Write a program that read the following XML document:
                
# <?xml version="1.0"?>
# <breakfast_menu>
#     <food>
#         <name itemid="11">Belgian Waffles</name>
#         <price>5.95</price>
#         <description>Two of our famous Belgian Waffles 
# with plenty of real maple syrup</description>
#         <calories>650</calories>
#     </food>
#     <food>
#         <name itemid="21">Strawberry Belgian Waffles</name>
#         <price>7.95</price>
#         <description>Light Belgian waffles covered 
# with strawberries and whipped cream</description>
#         <calories>900</calories>
#     </food>
#     <food>
#         <name itemid="31">Berry-Berry Belgian Waffles</name>
#         <price>8.95</price>
#         <description>Light Belgian waffles covered with 
# an assortment of fresh berries and whipped cream</description>
#         <calories>900</calories>
#     </food>
#     <food>
#         <name itemid="41">French Toast</name>
#         <price>4.50</price>
#         <description>Thick slices made from our 
# homemade sourdough bread</description>
#         <calories>600</calories>
#     </food>
# </breakfast_menu>
                
# and make the following changes:
# 1- add an element tasty with the content Yes to the first child of the breakfast element
# 2- remove the third child of the breakfast element
# 3- remove the attribute itemid in the second child of the breakfast element
# """, None, "Hard", "Descriptive/Practical", 25, "chris89")
# insert_question_option("Q291O1","Q291","""
# import xml.etree.ElementTree as ET
 
# mytree = ET.parse('myxmldoc.xml')
# myroot = mytree.getroot()
 
# # iterating through the price values.
# for prices in myroot.iter('price'):
#     # updates the price value
#     prices.text = str(float(prices.text)+10)
#     # creates a new attribute 
#     prices.set('newprices', 'yes')
 
# # creating a new tag under the parent. myroot[0] here is the first food tag.
# ET.SubElement(myroot[0], 'tasty')
# for temp in myroot.iter('tasty'):
#     # giving the value as Yes.
#     temp.text = str('YES')
 
# # remove the itemid attribute in the name tag of the second food tag.
# myroot[1][0].attrib.pop('itemid')
 
# # completely remove the third food tag.
# myroot.remove(myroot[2])
 
# mytree.write('output.xml')

# output would be like:
# <breakfast_menu>
#     <food>
#         <name itemid="11">Belgian Waffles</name>
#         <price newprices="yes">15.95</price>
#         <description>Two of our famous Belgian Waffles 
#                 with plenty of real maple syrup</description>
#         <calories>650</calories>
#         <tasty>YES</tasty>
#     </food>
#     <food>
#         <name>Strawberry Belgian Waffles</name>
#         <price newprices="yes">17.95</price>
#         <description>Light Belgian waffles covered 
#                 with strawberries and whipped cream</description>
#         <calories>900</calories>
#     </food>
#     <food>
#         <name itemid="41">French Toast</name>
#         <price newprices="yes">14.5</price>
#         <description>Thick slices made from our 
#                 homemade sourdough bread</description>
#         <calories>600</calories>
#     </food>
# </breakfast_menu>
# """, None, 1)

# insert_question("Q292","Information technology (IT)","Python programming", """
# Write a program that reads a JSON file like the attachment image and convert it to a CSV file.
# """, "..\images\Q292.png", "Hard", "Descriptive/Practical", 15, "christinalee")
# insert_question_option("Q292O1","Q292","""
# import json
# from csv import DictWriter

# # Opening JSON file and loading the data into the variable data
# with open("data.json") as jsf:
#     data = json.load(jsf)
 
# employee_data = data['emp_details']
 
# # now we will open a file for writing
# cols = ["emp_name","email","job_profile"]
# with open("data_file.csv", "w", newline="") as csvf:
#     dw = DictWriter(csvf, fieldnames=cols)
#     dw.writeheader()
#     dw.writerows(employee_data)
# """, None, 1)

# insert_question("Q293","Information technology (IT)","Python programming", """
# Write a program that read a csv file like the attachment image, and convert it to a JSON file with the primary key being 'No' column.
# """, "..\images\Q293.png", "Hard", "Descriptive/Practical", 20, "ezhang")
# insert_question_option("Q293O1","Q293","""
# import json
# from csv import DictReader

# def make_json(csvFilePath, jsonFilePath):
#     data = {}
     
#     with open(csvFilePath, encoding='utf-8') as csvf:
#         csvReader = DictReader(csvf)
         
#         # Convert each row into a dictionary and add it to data
#         for row in csvReader:
#             # column named 'No' is the primary key
#             key = row['No']
#             data[key] = row
 
#     with open(jsonFilePath, 'w', encoding='utf-8') as jsonf:
#         json.dump(data, jsonf, indent=4)
         
# # Driver Code
# make_json("Names.csv", "Names.json")
# """, None, 1)

# insert_question("Q294","Information technology (IT)","Python programming", """
# Write a program that gets a nested JSON file and flatten it.
# Note: Don't forget to check the sample input and output in the attachment image.
# """, "..\images\Q294.png", "Hard", "Descriptive/Practical", 30, "fpeck")
# insert_question_option("Q294O1","Q294","""
# import json

# def flatten_once(d):
#     new_d = {}
#     for key,value in d.items():
#         if isinstance(value,dict):
#             for k1, v1 in value.items(): 
#                 new_d[key + "_" + k1] = v1
#         elif isinstance(value,list):
#             for idx,el in enumerate(value): 
#                 new_d[key + "_" + str(idx)] = el
#         else:
#             new_d[key] = value
#     return new_d

# def flatten_dict(d):
#     new_dict = {}
#     temp = d
#     i = 0
#     while temp.keys() != new_dict.keys():
#         if i !=0:
#             temp = new_dict
#         new_dict = flatten_once(temp)
#         i += 1
#     return new_dict
# """, None, 1)

# insert_question("Q295","Information technology (IT)","Python programming", """
# Write a program that include functions to manage a binary file with record structure [BookNo, Book_Name, Author, Price]. meaning the user be able to:
#     1- add records to the file
#     2- gets an Author name and prints the count of books written by that author
# """, None, "Hard", "Descriptive/Practical", 30, "haledonald")
# insert_question_option("Q295O1","Q295","""
# import pickle

# def createFile():
#     with open("book.dat","ab") as bf:
#         BookNo = int(input("Enter book number: "))
#         Book_Name = input("Enter book Name: ")
#         Author =input("Enter author: ")
#         Price = int(input("Enter price: "))
#         record = [BookNo, Book_Name, Author, Price]
#         pickle.dump(record, bf)
    
# def countRec(Author):
#     with open("book.dat","rb") as bf:
#         count = 0
#         try:
#             while True:
#                 record = pickle.load(bf)
#                 if record[2]==Author:
#                     count+=1
#         except EOFError:
#             pass
#         return count

# #To test working of functions
# def testProgram():
#     while True:
#         createFile()
#         choice = input("Add more record (y/n)? ")
#         if choice in 'Nn':
#             break
#     Author = input('Enter author name to search: ')
#     n = countRec(Author)
#     print("No of books are",n)

# testProgram()
# """, None, 1)

# insert_question("Q296","Information technology (IT)","Python programming", """
# Implement a Shopping Cart class that supports methods for adding, removing, and calculating the total sum of the cart.
# """, None, "Normal", "Descriptive/Practical", 15, "hannahconner")
# insert_question_option("Q296O1","Q296","""
# class ShoppingCart:
#     def __init__(self):
#         self.items = []

#     # Add an item with a name and quantity to the shopping cart
#     def add_item(self, item_name, unit_price, qty):
#         item = (item_name, unit_price, qty)
#         self.items.append(item)

#     # Remove an item with a specific name from the shopping cart
#     def remove_item(self, item_name):
#         for item in self.items:
#             if item[0] == item_name:
#                 self.items.remove(item)
#                 break

#     # Calculate and return the total of items in the shopping cart
#     def calculate_total(self):
#         total = 0
#         for item in self.items:
#             total += (item[1] * item[2])
#         return total
# """, None, 1)

# insert_question("Q297","Information technology (IT)","Python programming", """
# Implement a Bank class that supports attributes and methods for customer accounts, depositing and withdrawal of the account, and virewing the balance of the account.
# Note: you must validate if the user has an account in the bank before any further operation except account creation.
# """, None, "Hard", "Descriptive/Practical", 20, "jknight")
# insert_question_option("Q297O1","Q297","""
# class Bank:
#     def __init__(self):
#         self.accounts = [] #---> customers account info would insert as dicts in this list

#     # Create a new account with a given account info and an optional initial balance (de-fault to 0)
#     def create_account(self, account_number, cust_fname, cust_lname, balance=0):
#         #check if account already exists
#         for account in self.accounts:
#             if account_number == account["account_number"]:
#                 print("Account number already exists.")
#                 return
#         account = {"account_number":account_number, "cust_fname":cust_fname, "cust_lname":cust_lname, "balance":balance}
#         self.accounts.append(account)
#         print("Account created successfully.")

#     # Make a deposit to the account with the given account number
#     def make_deposit(self, account_number, amount):
#         for account in self.accounts:
#             if account_number == account["account_number"]:
#                 account["balance"] += amount
#                 print("Deposit successful.")
#                 return
#         print("Account does not exist.")

#     # Make a withdrawal from the account with the given account number
#     def make_withdrawal(self, account_number, amount):
#         for account in self.accounts:
#             if account_number == account["account_number"]:
#                 if account["balance"] >= amount:
#                     account["balance"] -= amount
#                     print("Withdrawal successful.")
#                 else:
#                     print("Insufficient funds.")
#                 return
#         print("Account does not exist.")

#     # Check and print the balance of the account with the given account number
#     def check_balance(self, account_number):
#         for account in self.accounts:
#             if account_number == account["account_number"]:
#                 print(f"Account balance: {account['balance']}")
#                 return
#         print("Account number does not exist.")
# """, None, 1)

# insert_question("Q298","Information technology (IT)","Python programming", """
# Write a program that gets integer n and sign s from the user and prints the diamond pattern like the sample outputs in the attachment image.
# """, "..\images\Q298.png", "Easy", "Descriptive/Practical", 10, "jsaunders")
# insert_question_option("Q298O1","Q298","""
# n = int(input("Enter diamond half height (n): "))
# s = input("Enter diamond symbol(s): ")

# # Drawing upper layer: n rows consinsting of " " + s (increasing)
# for i in range(n):
#     print(" " * (n-1-i) + f"{s} " * (i+1))
# # Drawing lower layer: n-1 rows consinsting of " " + s (decreasing)
# for i in range(n-1):
#     print(" " * (i+1) + f"{s} " * (n-1-i))
# """, None, 1)

# insert_question("Q299","Information technology (IT)","Python programming", """
# Write a program that gets integer h from the user and prints the alphabets triangle pattern like the sample outputs in the attachment image.
# """, "..\images\Q299.png", "Normal", "Descriptive/Practical", 10, "navarromark")
# insert_question_option("Q299O1","Q299","""
# h = int(input("Enter height of triangle(h): "))
# num = 65
# for i in range(1,h+1):
#     for j in range(65,i+65):
#         print(chr(num), end=" ")
#         num += 1
#     print()
# """, None, 1)

# insert_question("Q300","Information technology (IT)","Python programming", """
# Write a program that gets integer n from the user and prints the Pascal triangle pattern like the sample outputs in the attachment image.
# Hint: nCr= n!/(n-r)!r!
# """, "..\images\Q300.png", "Hard", "Descriptive/Practical", 15, "phelpsashley")
# insert_question_option("Q300O1","Q300","""
# from math import factorial
# n=int(input("Enter n: "))
# for i in range(n):
#     print(" " * (n-i-1), end=" ")
#     for j in range(i+1):
#         print(factorial(i)//(factorial(j)*factorial(i-j)), end=" ")
#     print()
# """, None, 1)
#-----------------------------II-6-simulating exams and inserting exam data------------------------------#
#-----------------------------part1: creating a multi-choice exam (session1)
# Therorical Python Exam No.1 / 40 students / 45min / 100 points total @ 34 questions (2points bonus)/ has_nagative_score
# insert_exam("Ex1", "Therorical Python Exam No.1", "2024/02/13", "10:00:00", 45, 1, \
#                 51, "cantujoseph", "angela21", "jennifer32")

# selecting exam questions randomly: select 34 random multi-choice question from question bank
def select_multichoice_questions(n):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()
    
    cursor.execute("""
    SELECT question_id
    FROM Question
    WHERE type = 'Multiple choice'""")

    questions = [q[0] for q in cursor.fetchall()]

    cursor.close()
    connection.close()

    print("Random multiple choice questions selected successfully.")
    return random.sample(questions, k=n)

# for q in select_multichoice_questions(34):
#     insert_exam_question("Ex1", q)
# print("Exam questions selected successfully.")
# creating user exams(specifying the students that are to take the exam): 40 random students
def select_students(n):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()
    
    cursor.execute("""
    SELECT u.user_name
    FROM User u JOIN User_Role ur
    ON u.user_name = ur.user_name
    WHERE ur.role_name = 'Student'""")

    students = [s[0] for s in cursor.fetchall()]

    cursor.close()
    connection.close()

    print("Random students selected successfully.")
    return random.sample(students, k=n)

# for s in select_students(40):
#     insert_user_exam("Ex1", s, None, 34, 0, \
#                     0, 34, 0)
# print("Students added to the exam successfully.")

#students answer to questions randomly....
def do_exam(exam_id):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()

    # select exam questions
    cursor.execute("""
    SELECT question_id
    FROM Exam_Question
    WHERE exam_id = ?""", (exam_id,))

    questions = [q[0] for q in cursor.fetchall()]

    # select exam students
    cursor.execute("""
    SELECT user_name
    FROM User_Exam
    WHERE exam_id = ?""", (exam_id,))

    students = [s[0] for s in cursor.fetchall()]

    # student answers each question randomly
    # options are like question_id + O + (1-4) or the question may not be answered that is None
    # we want to generate at least 10 correct answers

    cursor.execute("""
    SELECT EQ.question_id, O.option_id
    FROM Exam_Question EQ
    JOIN Question Q ON EQ.question_id = Q.question_id
    JOIN Option O ON Q.question_id = O.question_id
    WHERE O.is_correct_answer = 1""")

    question_answers_dic =  {x[0]:x[1] for x in cursor.fetchall()}

    cursor.close()
    connection.close()

    for s in students:
        correct_answers = random.randint(10,30)
        for q in questions:
            choices = [1, 2, 3, 4]
            random_option = q + "O" + str(choices.pop())
            while correct_answers != 0:
                if random_option != question_answers_dic[q]:
                    random_option = q + "O" + str(choices.pop())
                else:
                    correct_answers -= 1
                    break
            insert_answer(exam_id, s, q, random_option, None, None)
    
    print("Exam done successfully.")

# do_exam("Ex1")

# # Example usage:
# update_user_exam_multi('Ex1')

# Generate random feedbacks

def generate_feedbacks(exam_id):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()

    # select exam students with their is_passed
    cursor.execute("""
    SELECT user_name, is_passed
    FROM User_Exam 
    WHERE exam_id = ?""", (exam_id,))

    students = cursor.fetchall()

    cursor.close()
    connection.close()

    for s in students:
        
        imp_sug = ["Clearer Instructions: Ensure that the exam instructions are clearer and provide a better understanding of what is expected from the students",
                   "More Practice Questions: Provide additional practice questions or resources to help students prepare better for the exam.",
                   "Diverse Question Types: Include a variety of question types (e.g., multiple-choice, short answer, essay) to assess different aspects of understanding.",
                   "Feedback Mechanism: Implement a system for providing feedback on exam performance to help students understand their strengths and weaknesses.",
                   "Extended Time: Consider offering extended time for students who might require additional accommodations or have difficulties completing the exam within the allotted time.",
                   "More Realistic Scenarios: Incorporate real-world scenarios or examples in the exam questions to make them more relevant and engaging.",
                   "Clear Grading Rubric: Provide a clear grading rubric or criteria for evaluating answers to help students understand how they will be assessed.",
                   "Accessible Resources: Ensure that all resources, including study materials and exam content, are accessible to students with diverse learning needs.",
                   "Review Sessions: Offer review sessions or office hours where students can seek clarification on exam topics or ask questions about exam preparation.",
                   "Engaging Content: Make the exam content more engaging and interesting to encourage active participation and motivation among students.",
                   "Flexibility in Exam Format: Consider allowing students to choose from different exam formats (e.g., online, in-person) based on their preferences or circumstances.",
                   "Timely Feedback: Provide timely feedback on exams to help students identify areas for improvement and track their progress throughout the course.",
                   "Accurate Grading: Ensure that exams are graded accurately and fairly, with consistent standards applied to all students.",
                   "Address Technical Issues: Address any technical issues or challenges that students may encounter during the exam, such as software glitches or connectivity issues.",
                   "Opportunities for Revision: Consider allowing students the opportunity to revise or resubmit certain exam components to demonstrate their learning and understanding.",
                   "Too Easy: Some of the questions felt too straightforward and didn't require much critical thinking. Adding more complex questions would better assess our knowledge."]
        
        good_fb = ["Thank you for the well-structured exam! It challenged me in all the right ways and helped me truly understand the material.",
                   "I appreciate the thoughtfulness that went into crafting the exam questions. They were clear, relevant, and a true reflection of what we learned in class.",
                   "I'm grateful for the opportunity to showcase my knowledge on such a comprehensive exam. It's evident that the instructor cares deeply about our success.",
                   "Kudos to the professor for creating an exam that allowed me to demonstrate my understanding effectively. It was challenging yet fair, and I feel confident in my performance.",
                   "I'm impressed by the quality of the exam questions. They encouraged critical thinking and problem-solving skills, which are essential for real-world application.",
                   "Thank you for providing such a thorough assessment of the course material. The exam questions were engaging and thought-provoking, making the learning experience enjoyable.",
                   "I want to express my gratitude for the professor's dedication to our learning journey. The exam questions were carefully crafted to evaluate our understanding comprehensively.",
                   "I feel privileged to have been challenged by such well-designed exam questions. They inspired me to think deeply about the subject matter and pushed me to excel.",
                   "The exam was a true testament to the quality of instruction we receive in this course. I feel prepared and confident, thanks to the thorough preparation provided by the professor.",
                   "I want to commend the professor for their commitment to our success. The exam was a fair and accurate reflection of our learning, and I appreciate the opportunity to showcase my knowledge."]
        
        com_clar_dif = ["Confusing Language: Some of the questions had confusing wording, making it difficult to understand what was being asked. It would be helpful to have clearer language in future exams.",
                        "Ambiguous Questions: A few questions seemed ambiguous and open to interpretation. It would be beneficial to provide more context or clarity to ensure that students understand what is being asked.",
                        "Lack of Examples: The exam lacked examples or sample problems to illustrate the concepts being tested. Including more examples would have helped clarify the material.",
                        "Inconsistent Formatting: The formatting of the exam questions varied, which made it challenging to navigate through the different sections. Consistent formatting would improve the overall organization.",
                        "Overly Difficult: A few questions were overly difficult and seemed beyond the scope of what we learned in class. It would be beneficial to adjust the difficulty level to better match the course content.",
                        "Subjective Grading: The grading of subjective questions seemed arbitrary, making it difficult to anticipate how our answers would be evaluated. Providing clearer grading criteria would help alleviate uncertainty."]
        
        bad_fb = ["This exam was an absolute joke! It's like the professor wants us to fail. Maybe they should try teaching instead of setting us up for failure.",
                  "Worst exam ever! It's obvious the instructor has no clue how to write fair questions. What a waste of time!",
                  "Thanks for nothing! I've never seen such poorly written questions. Are you trying to make us feel stupid?",
                  "Is the professor even qualified to teach this course? The exam questions were so confusing, it's like they don't even understand the material themselves!",
                  "Why bother studying when the exam is filled with trick questions? It's like the professor enjoys watching us struggle.",
                  "Absolutely ridiculous! The questions were so random and irrelevant to what we learned in class. What's the point of even attending lectures?",
                  "This exam was a disaster! It's obvious the instructor doesn't care about their students' success. Maybe it's time to find a new profession.",
                  "I'm convinced the professor gets pleasure out of watching us fail. The questions were designed to trip us up at every turn!",
                  "It's a shame the professor's ego is more important than our education. Maybe they should retire and let someone who actually cares take over.",
                  "Who wrote these questions, a fifth-grader? It's embarrassing that we're paying for this level of incompetence."]
        
        # if the student is passed, we get suggestions for improvement, a good feedback text and a rating between 5 to 10 and the comment is visible
        if s[1] == 1:
            insert_feedback(exam_id, s[0], "Suggestion for improvement", random.choice(good_fb) + "\nYour exam application is good but could be better and here is my suggestion:\n" + random.choice(imp_sug), \
                               None, random.randint(5,10), "Pending/Unread", 1)
        # if the student is failed, we get comments on clarity, and difficulty levels, a bad feedback text and a rating between 1 to 5 and the comment is invisible
        else:
            insert_feedback(exam_id, s[0], "Comment on clarity, and difficulty levels", random.choice(bad_fb) + "\nYour exam application is not good enough and i have some comments on exam:\n" + random.choice(com_clar_dif), \
                                None, random.randint(1,5), "Pending/Unread", 0)

    print("Exam feedbacks generated successfully.")

# generate_feedbacks("Ex1")

# read_feedbacks("Ex1")
#-----------------------------part2: creating a descriptive/practical exam (session2)
# Practical Python Exam No.1 / ? students / 60min / 100 points total @ 9 questions (10points bonus)
# only students that passed the previous session of exam can take this seesion of exam

# insert_exam("Ex2", "Practical Python Exam No.1", "2024/02/20", "08:00:00", 90, 0, \
#                 51, "michael38", "diazcharles", "ttrujillo")

# selecting exam questions from question bank
# insert_exam_question("Ex2", "Q253") # 10 points
# insert_exam_question("Ex2", "Q257") # 10 points
# insert_exam_question("Ex2", "Q262") # 15 points
# insert_exam_question("Ex2", "Q269") # 20 points
# insert_exam_question("Ex2", "Q274") # 10 points
# insert_exam_question("Ex2", "Q278") # 10 points
# insert_exam_question("Ex2", "Q282") # 10 points
# insert_exam_question("Ex2", "Q287") # 10 points
# insert_exam_question("Ex2", "Q275") # 15 points

# print("Exam questions selected successfully.")
# creating user exams(specifying the students that are to take the exam):
# only students that passed the previous session of exam can take this seesion of exam
# def select_students(n):
#     # the relative file path
    # path = '..\data\Exam_App.db'
    # # get the path to the directory this script is in
    # scriptdir = os.path.dirname(__file__)
    # # add the relative path to the database file from there
    # db_path = os.path.join(scriptdir, path)
    # # make sure the path exists and if not create it
    # os.makedirs(os.path.dirname(db_path), exist_ok=True)

    # connection=sqlite3.connect(db_path)
#     cursor=connection.cursor()
    
#     cursor.execute("""
#     SELECT user_name
#     FROM User_Exam
#     WHERE is_passed = 1 AND exam_id ='Ex1'""")

#     students = [s[0] for s in cursor.fetchall()]

#     cursor.close()
#     connection.close()

#     print("Students selected successfully.")
#     return students

# for s in select_students(40):
#     insert_user_exam("Ex2", s, None, 9, 0, \
#                     0, 34, 0)
# print("Students added to the exam successfully.")

# students answer to questions and exam handler checks if the answers correct....
# update user exam 
def update_user_exam_prac(score, correct_answers, wrong_answers, unanswered_questions, is_passed, exam_id, user_name):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor = connection.cursor()

    # Update User_Exam table for each user_name
    cursor.execute("""
        UPDATE User_Exam
        SET score = ?,
            correct_answers = ?,
            wrong_answers = ?,
            unanswered_questions = ?,
            is_passed = ?
        WHERE exam_id = ? AND user_name = ?""",
            (score, correct_answers, wrong_answers, unanswered_questions, is_passed, exam_id, user_name))

    connection.commit()
    cursor.close()
    connection.close()

    print("User_Exam table updated successfully.")

# # anthony08
# insert_answer("Ex2", "anthony08", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "anthony08", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "anthony08", "Q262", None, None, None)

# insert_answer("Ex2", "anthony08", "Q269", None, None, None)

# insert_answer("Ex2", "anthony08", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "anthony08", "Q275", None, None, None)

# insert_answer("Ex2", "anthony08", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "anthony08", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "anthony08", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(60, 6, 0, 3, 1, "Ex2", "anthony08")

# # ashley09
# insert_answer("Ex2", "ashley09", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "ashley09", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "ashley09", "Q262", None, None, None)

# insert_answer("Ex2", "ashley09", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "ashley09", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "ashley09", "Q275", None, None, None)

# insert_answer("Ex2", "ashley09", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "ashley09", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "ashley09", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(75, 7, 0, 2, 1, "Ex2", "ashley09")

# # colerobert
# insert_answer("Ex2", "colerobert", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "colerobert", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "colerobert", "Q262", None, None, None)

# insert_answer("Ex2", "colerobert", "Q269", None, None, None)

# insert_answer("Ex2", "colerobert", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "colerobert", "Q275", None, None, None)

# insert_answer("Ex2", "colerobert", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "colerobert", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "colerobert", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(50, 5, 0, 4, 0, "Ex2", "colerobert")

# # davidherman
# insert_answer("Ex2", "davidherman", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "davidherman", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "davidherman", "Q262", None, None, None)

# insert_answer("Ex2", "davidherman", "Q269", None, None, None)

# insert_answer("Ex2", "davidherman", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "davidherman", "Q275", None, None, None)

# insert_answer("Ex2", "davidherman", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "davidherman", "Q282", None, None, None)

# insert_answer("Ex2", "davidherman", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(40, 4, 0, 5, 0, "Ex2", "davidherman")

# # hicksnicole
# insert_answer("Ex2", "hicksnicole", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "hicksnicole", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "hicksnicole", "Q262", None, None, None)

# insert_answer("Ex2", "hicksnicole", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "hicksnicole", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "hicksnicole", "Q275", None, None, None)

# insert_answer("Ex2", "hicksnicole", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "hicksnicole", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "hicksnicole", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(80, 7, 0, 2, 1, "Ex2", "hicksnicole")

# # houstonjacob
# insert_answer("Ex2", "houstonjacob", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q262", None, """
# import re
# def is_email(text):  
#     pattern_match = re.search(r"^([a-z0-9\._+&%#-]+)@([0-9a-z\.-]+)\.([a-z]{2,6})$", text, re.IGNORECASE)
#     consec_dots_match = re.search(r"^([a-z0-9\._+@&%#-]*)(\.{2})([a-z0-9\._+@&%#-]*)$", text, re.IGNORECASE)
#     init_dot_match = re.search(r"^\.([a-z0-9\._+@&%#-]*)$", text, re.IGNORECASE)
#     mid_dot_left_match = re.search(r"^([a-z0-9\._+&%#-]+)\.@([a-z0-9\.-]+)$", text, re.IGNORECASE)
#     mid_dot_right_match = re.search(r"^([a-z0-9\._+&%#-]+)@\.([a-z0-9\.-]+)$", text, re.IGNORECASE)

#     if pattern_match and not consec_dots_match and not init_dot_match  \
#                     and not mid_dot_left_match and not mid_dot_right_match:
#         return True
#     return False
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "houstonjacob", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q275", None, None, None)

# insert_answer("Ex2", "houstonjacob", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "houstonjacob", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(95, 8, 0, 1, 1, "Ex2", "houstonjacob")

# # jason16
# insert_answer("Ex2", "jason16", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "jason16", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "jason16", "Q262", None, None, None)

# insert_answer("Ex2", "jason16", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "jason16", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "jason16", "Q275", None, """
# def subf(n, memo={}):
#     if n == 0:
#         return 1
#     if n == 1:
#         return 0
#     if n in memo:
#         return memo[n]
#     memo[n] = (n-1) * (subf(n-1, memo) + subf(n-2, memo))
#     return memo[n]

# n = int(input("Enter N: "))
# i = 0
# while subf(i) <= n:
#     print(subf(i), end = " ")
#     i += 1
# """, None)

# insert_answer("Ex2", "jason16", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "jason16", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "jason16", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(95, 8, 0, 1, 1, "Ex2", "jason16")

# # lewismichael, lopezashley, mary97, turnerchristina, walleranthony--> didn't attend, so no need to update user_exam

# # meganhooper
# insert_answer("Ex2", "meganhooper", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "meganhooper", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "meganhooper", "Q262", None, None, None)

# insert_answer("Ex2", "meganhooper", "Q269", None, None, None)

# insert_answer("Ex2", "meganhooper", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "meganhooper", "Q275", None, None, None)

# insert_answer("Ex2", "meganhooper", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "meganhooper", "Q282", None, None, None)

# insert_answer("Ex2", "meganhooper", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(40, 4, 0, 5, 0, "Ex2", "meganhooper")

# # melindaross
# insert_answer("Ex2", "melindaross", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "melindaross", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "melindaross", "Q262", None, None, None)

# insert_answer("Ex2", "melindaross", "Q269", None, None, None)

# insert_answer("Ex2", "melindaross", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "melindaross", "Q275", None, None, None)

# insert_answer("Ex2", "melindaross", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "melindaross", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "melindaross", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(60, 6, 0, 3, 1, "Ex2", "melindaross")

# # milesamanda
# insert_answer("Ex2", "milesamanda", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "milesamanda", "Q257", None, None, None)

# insert_answer("Ex2", "milesamanda", "Q262", None, None, None)

# insert_answer("Ex2", "milesamanda", "Q269", None, None, None)

# insert_answer("Ex2", "milesamanda", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "milesamanda", "Q275", None, None, None)

# insert_answer("Ex2", "milesamanda", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "milesamanda", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "milesamanda", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(40, 4, 0, 5, 0, "Ex2", "milesamanda")

# # mvelasquez
# insert_answer("Ex2", "mvelasquez", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "mvelasquez", "Q257", None, None, None)

# insert_answer("Ex2", "mvelasquez", "Q262", None, None, None)

# insert_answer("Ex2", "mvelasquez", "Q269", None, None, None)

# insert_answer("Ex2", "mvelasquez", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "mvelasquez", "Q275", None, None, None)

# insert_answer("Ex2", "mvelasquez", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "mvelasquez", "Q282", None, None, None)

# insert_answer("Ex2", "mvelasquez", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(30, 3, 0, 6, 0, "Ex2", "mvelasquez")

# # nealjohn
# insert_answer("Ex2", "nealjohn", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "nealjohn", "Q257", None, None, None)

# insert_answer("Ex2", "nealjohn", "Q262", None, None, None)

# insert_answer("Ex2", "nealjohn", "Q269", None, None, None)

# insert_answer("Ex2", "nealjohn", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "nealjohn", "Q275", None, None, None)

# insert_answer("Ex2", "nealjohn", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "nealjohn", "Q282", None, None, None)

# insert_answer("Ex2", "nealjohn", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(30, 3, 0, 6, 0, "Ex2", "nealjohn")

# # perrywilliams
# insert_answer("Ex2", "perrywilliams", "Q253", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q257", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q262", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q269", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "perrywilliams", "Q275", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "perrywilliams", "Q282", None, None, None)

# insert_answer("Ex2", "perrywilliams", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(20, 2, 0, 7, 0, "Ex2", "perrywilliams")

# # rcompton
# insert_answer("Ex2", "rcompton", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "rcompton", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "rcompton", "Q262", None, None, None)

# insert_answer("Ex2", "rcompton", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "rcompton", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "rcompton", "Q275", None, None, None)

# insert_answer("Ex2", "rcompton", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "rcompton", "Q282", None, """
# import calendar
# def print_calendar(year):
#     cal = calendar.TextCalendar(calendar.SUNDAY)
#     # column width: 2, lines per week: 1 
#     # number of spaces between month columns: 1
#     # 3: no. of months per column.
#     print(cal.formatyear(year, 2, 1, 1, 3))

# print_calendar(2018)
# """, None)

# insert_answer("Ex2", "rcompton", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(80, 7, 0, 2, 1, "Ex2", "rcompton")

# # smithkelly
# insert_answer("Ex2", "smithkelly", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "smithkelly", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "smithkelly", "Q262", None, None, None)

# insert_answer("Ex2", "smithkelly", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "smithkelly", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "smithkelly", "Q275", None, None, None)

# insert_answer("Ex2", "smithkelly", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "smithkelly", "Q282", None, None, None)

# insert_answer("Ex2", "smithkelly", "Q287", None, """
# from csv import reader, writer

# with open("mydata1.csv") as f:
#     r = list(reader(f))
#     header = r[0]
#     data = r[1:]
#     data.sort(key= lambda x:x[1])
# with open("mydata1.csv", "w", newline="") as f:
#     w = writer(f)
#     w.writerows([header] + data)
# """, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(70, 6, 0, 3, 1, "Ex2", "smithkelly")

# # thomasanderson
# insert_answer("Ex2", "thomasanderson", "Q253", None, """
# # Using Euclid's algorithm we calculate gcd(a,b), then we calculate lcm using the following mathematical relation 
# #                        lcm(a,b) = (a*b) / gcd(a,b)
# def gcd(a, b):
#     a, b = max(a, b), min(b, a)
#     while b:
#         a, b = b, a%b
#     return a

# def lcm(a, b):
#     return (a*b) // gcd(a,b)

# # then based on the coprime definition, gcd(a,b) must be 1 to a,b be coprime
# def are_coprime(a, b):
#     return gcd(a,b) == 1
# """, None)

# insert_answer("Ex2", "thomasanderson", "Q257", None, """
# r1 = int(input("Enter outer rectangle rows (r1): "))
# c1 = int(input("Enter outer rectangle columns(c1): "))
# s1 = input("Enter outer rectangle symbol(s1): ")
# r2 = int(input("Enter inner rectangle rows (r2): "))
# c2 = int(input("Enter inner rectangle columns(c2): "))
# s2 = input("Enter inner rectangle symbol(s2): ")

# if (r1-r2) % 2 == 0 and (c1-c2) % 2 == 0:
#     # Drawing upper layer: (r1-r2)/2 rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
#     # Drawing mid layer: r2 rows rows consinsting of s1 + s2 + s1
#     for i in range(r2):
#         print(f"{s1} " * int((c1-c2)/2) + f"{s2} " * c2 + f"{s1} " * int((c1-c2)/2))
#     # Drawing lower layer: (r1-r2)/2 rows rows consinsting only of s1
#     for i in range(int((r1-r2)/2)):
#         print(f"{s1} " * c1)
# else:
#     print("Impossible!")
# """, None)

# insert_answer("Ex2", "thomasanderson", "Q262", None, None, None)

# insert_answer("Ex2", "thomasanderson", "Q269", None, '''
# from math import pi,sqrt

# class Shape():
#     def __init__(self, name, color):
#         self.name = name
#         self.color = color
    
#     def __str__(self):
#         return f"A Shape named {self.name} with {self.color} color"

# class Circle(Shape):
#     def __init__(self,name, color, radius):
#         super().__init__(name, color)
#         self.radius = radius
    
#     def primeter(self):
#         return 2 * pi * self.radius
    
#     def area(self):
#         return pi * (self.radius ** 2)
    
#     def __str__(self):
#         return f"""A circle named {self.name} with {self.color} color 
#                     with radius = {self.radius}"""

# class Rectangle(Shape):
#     def __init__(self,name, color, height, width):
#         super().__init__(name, color)
#         self.height = height
#         self.width = width
    
#     def primeter(self):
#         return 2 * (self.height + self.width)
    
#     def area(self):
#         return self.height * self.width
    
#     def __str__(self):
#         return f"""A rectangle named {self.name} with {self.color} color 
#                      with width = {self.width} and height = {self.height}"""

# class Triangle(Shape):
#     def __init__(self,name, color, a, b, c):
#         super().__init__(name, color)
#         self.a = a
#         self.b = b
#         self.c = c
    
#     def primeter(self):
#         return self.a + self.b + self.c
    
#     def area(self):
#         s = (self.a + self.b + self.c)/2
#         return sqrt(s * (s-self.a) * (s-self.b) * (s-self.c))
    
#     def __str__(self):
#         return f"""A triangle named {self.name} with {self.color} color 
#                      with a = {self.a} and b = {self.b} and c = {self.c}"""
# ''', None)

# insert_answer("Ex2", "thomasanderson", "Q274", None, """
# def is_undulating(x):
#     l = len(str(x))
#     if l < 3:
#         return False
#     ab = str(x)[0:2]
#     for i in range(2,l//2 + 1,2):
#         if str(x)[i:i+2] != ab:
#             return False
#     if l%2 == 0:
#         return True
#     else:
#         return True if str(x)[-1] == ab[0] else False
# """, None)

# insert_answer("Ex2", "thomasanderson", "Q275", None, None, None)

# insert_answer("Ex2", "thomasanderson", "Q278", None, """
# from collections import Counter
                       
# def is_heterogram(s:str):
#     s = s.strip().lower()
#     # remove any non alphanumeric chaaracters
#     for chr in s:
#         if chr in "!\"#$%&\'()*+,-./:;?@[\]^_`{|}~":
#             s = s.replace(chr,””)

#     #using counter to find most common
#     counter = Counter(s)
#     # most common must have 1 count
#     return counter.most_common(1)[0][1] == 1
# """, None)

# insert_answer("Ex2", "thomasanderson", "Q282", None, None, None)

# insert_answer("Ex2", "thomasanderson", "Q287", None, None, None)

# # exam handler updated user_exam table:
# update_user_exam_prac(60, 5, 0, 4, 1, "Ex2", "thomasanderson")
    
# Generate random feedbacks

def generate_feedbacks(exam_id):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()

    # select exam students with their is_passed
    cursor.execute("""
    SELECT user_name, is_passed
    FROM User_Exam 
    WHERE exam_id = ?""", (exam_id,))

    students = cursor.fetchall()

    cursor.close()
    connection.close()

    for s in students:
        
        imp_sug = ["Clearer Instructions: Ensure that the exam instructions are clearer and provide a better understanding of what is expected from the students",
                   "More Practice Questions: Provide additional practice questions or resources to help students prepare better for the exam.",
                   "Diverse Question Types: Include a variety of question types (e.g., multiple-choice, short answer, essay) to assess different aspects of understanding.",
                   "Feedback Mechanism: Implement a system for providing feedback on exam performance to help students understand their strengths and weaknesses.",
                   "Extended Time: Consider offering extended time for students who might require additional accommodations or have difficulties completing the exam within the allotted time.",
                   "More Realistic Scenarios: Incorporate real-world scenarios or examples in the exam questions to make them more relevant and engaging.",
                   "Clear Grading Rubric: Provide a clear grading rubric or criteria for evaluating answers to help students understand how they will be assessed.",
                   "Accessible Resources: Ensure that all resources, including study materials and exam content, are accessible to students with diverse learning needs.",
                   "Review Sessions: Offer review sessions or office hours where students can seek clarification on exam topics or ask questions about exam preparation.",
                   "Engaging Content: Make the exam content more engaging and interesting to encourage active participation and motivation among students.",
                   "Flexibility in Exam Format: Consider allowing students to choose from different exam formats (e.g., online, in-person) based on their preferences or circumstances.",
                   "Timely Feedback: Provide timely feedback on exams to help students identify areas for improvement and track their progress throughout the course.",
                   "Accurate Grading: Ensure that exams are graded accurately and fairly, with consistent standards applied to all students.",
                   "Address Technical Issues: Address any technical issues or challenges that students may encounter during the exam, such as software glitches or connectivity issues.",
                   "Opportunities for Revision: Consider allowing students the opportunity to revise or resubmit certain exam components to demonstrate their learning and understanding.",
                   "Too Easy: Some of the questions felt too straightforward and didn't require much critical thinking. Adding more complex questions would better assess our knowledge."]
        
        good_fb = ["Thank you for the well-structured exam! It challenged me in all the right ways and helped me truly understand the material.",
                   "I appreciate the thoughtfulness that went into crafting the exam questions. They were clear, relevant, and a true reflection of what we learned in class.",
                   "I'm grateful for the opportunity to showcase my knowledge on such a comprehensive exam. It's evident that the instructor cares deeply about our success.",
                   "Kudos to the professor for creating an exam that allowed me to demonstrate my understanding effectively. It was challenging yet fair, and I feel confident in my performance.",
                   "I'm impressed by the quality of the exam questions. They encouraged critical thinking and problem-solving skills, which are essential for real-world application.",
                   "Thank you for providing such a thorough assessment of the course material. The exam questions were engaging and thought-provoking, making the learning experience enjoyable.",
                   "I want to express my gratitude for the professor's dedication to our learning journey. The exam questions were carefully crafted to evaluate our understanding comprehensively.",
                   "I feel privileged to have been challenged by such well-designed exam questions. They inspired me to think deeply about the subject matter and pushed me to excel.",
                   "The exam was a true testament to the quality of instruction we receive in this course. I feel prepared and confident, thanks to the thorough preparation provided by the professor.",
                   "I want to commend the professor for their commitment to our success. The exam was a fair and accurate reflection of our learning, and I appreciate the opportunity to showcase my knowledge."]
        
        com_clar_dif = ["Confusing Language: Some of the questions had confusing wording, making it difficult to understand what was being asked. It would be helpful to have clearer language in future exams.",
                        "Ambiguous Questions: A few questions seemed ambiguous and open to interpretation. It would be beneficial to provide more context or clarity to ensure that students understand what is being asked.",
                        "Lack of Examples: The exam lacked examples or sample problems to illustrate the concepts being tested. Including more examples would have helped clarify the material.",
                        "Inconsistent Formatting: The formatting of the exam questions varied, which made it challenging to navigate through the different sections. Consistent formatting would improve the overall organization.",
                        "Overly Difficult: A few questions were overly difficult and seemed beyond the scope of what we learned in class. It would be beneficial to adjust the difficulty level to better match the course content.",
                        "Subjective Grading: The grading of subjective questions seemed arbitrary, making it difficult to anticipate how our answers would be evaluated. Providing clearer grading criteria would help alleviate uncertainty."]
        
        bad_fb = ["This exam was an absolute joke! It's like the professor wants us to fail. Maybe they should try teaching instead of setting us up for failure.",
                  "Worst exam ever! It's obvious the instructor has no clue how to write fair questions. What a waste of time!",
                  "Thanks for nothing! I've never seen such poorly written questions. Are you trying to make us feel stupid?",
                  "Is the professor even qualified to teach this course? The exam questions were so confusing, it's like they don't even understand the material themselves!",
                  "Why bother studying when the exam is filled with trick questions? It's like the professor enjoys watching us struggle.",
                  "Absolutely ridiculous! The questions were so random and irrelevant to what we learned in class. What's the point of even attending lectures?",
                  "This exam was a disaster! It's obvious the instructor doesn't care about their students' success. Maybe it's time to find a new profession.",
                  "I'm convinced the professor gets pleasure out of watching us fail. The questions were designed to trip us up at every turn!",
                  "It's a shame the professor's ego is more important than our education. Maybe they should retire and let someone who actually cares take over.",
                  "Who wrote these questions, a fifth-grader? It's embarrassing that we're paying for this level of incompetence."]
        
        # if the student is passed, we get suggestions for improvement, a good feedback text and a rating between 5 to 10 and the comment is visible
        if s[1] == 1:
            insert_feedback(exam_id, s[0], "Suggestion for improvement", random.choice(good_fb) + "\nYour exam application is good but could be better and here is my suggestion:\n" + random.choice(imp_sug), \
                               None, random.randint(5,10), "Pending/Unread", 1)
        # if the student is failed, we get comments on clarity, and difficulty levels, a bad feedback text and a rating between 1 to 5 and the comment is invisible
        else:
            insert_feedback(exam_id, s[0], "Comment on clarity, and difficulty levels", random.choice(bad_fb) + "\nYour exam application is not good enough and i have some comments on exam:\n" + random.choice(com_clar_dif), \
                                None, random.randint(1,5), "Pending/Unread", 0)

    print("Exam feedbacks generated successfully.")

# generate_feedbacks("Ex2")
# Exam supervisor now reads the feedbacks and update their status....
def read_feedbacks(exam_id):
    # the relative file path
    path = '..\data\Exam_App.db'
    # get the path to the directory this script is in
    scriptdir = os.path.dirname(__file__)
    # add the relative path to the database file from there
    db_path = os.path.join(scriptdir, path)
    # make sure the path exists and if not create it
    os.makedirs(os.path.dirname(db_path), exist_ok=True)

    connection=sqlite3.connect(db_path)
    cursor=connection.cursor()

    cursor.execute("""
    UPDATE Feedback
    SET status = 'Analyzed/Read' 
    WHERE exam_id = ?""", (exam_id,))

    connection.commit()
    cursor.close()
    connection.close()

    print("Exam feedbacks analyzed/read successfully.")

# read_feedbacks("Ex2")
#----------------------------------------II-7-users login and logouts---------------------------------------#
# user login check
# user_login("Amir1374","12345") # wrong password
# time.sleep(1)
# user_login("1242aaaax12","021#Gang*GTA$") # not a user
# time.sleep(1)
# user_login("Amir1374","021#Gang*GTA$") # admin logs in successfully
# time.sleep(1)
# user_login("Amir1374","021#Gang*GTA$") # admin already logged on
# time.sleep(1)

# user logout check
# user_logout("Ali0068") # not a user
# user_logout("Amir1374") # admin logs out successfully
# user_logout("Amir1374") # admin already logged out
